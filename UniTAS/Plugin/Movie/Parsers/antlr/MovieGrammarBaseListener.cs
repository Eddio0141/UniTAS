//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MovieGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMovieGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.Diagnostics.DebuggerNonUserCode]

public partial class MovieGrammarBaseListener : IMovieGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.script"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScript([NotNull] MovieGrammarParser.ScriptContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.script"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScript([NotNull] MovieGrammarParser.ScriptContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MovieGrammarParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MovieGrammarParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.scopedProgram"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScopedProgram([NotNull] MovieGrammarParser.ScopedProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.scopedProgram"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScopedProgram([NotNull] MovieGrammarParser.ScopedProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.actionSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActionSeparator([NotNull] MovieGrammarParser.ActionSeparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.actionSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActionSeparator([NotNull] MovieGrammarParser.ActionSeparatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.action"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAction([NotNull] MovieGrammarParser.ActionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.action"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAction([NotNull] MovieGrammarParser.ActionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.actionWithSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActionWithSeparator([NotNull] MovieGrammarParser.ActionWithSeparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.actionWithSeparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActionWithSeparator([NotNull] MovieGrammarParser.ActionWithSeparatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.frameAdvance"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFrameAdvance([NotNull] MovieGrammarParser.FrameAdvanceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.frameAdvance"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFrameAdvance([NotNull] MovieGrammarParser.FrameAdvanceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.breakAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakAction([NotNull] MovieGrammarParser.BreakActionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.breakAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakAction([NotNull] MovieGrammarParser.BreakActionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.continueAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueAction([NotNull] MovieGrammarParser.ContinueActionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.continueAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueAction([NotNull] MovieGrammarParser.ContinueActionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.returnAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnAction([NotNull] MovieGrammarParser.ReturnActionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.returnAction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnAction([NotNull] MovieGrammarParser.ReturnActionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] MovieGrammarParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] MovieGrammarParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.variableAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableAssignment([NotNull] MovieGrammarParser.VariableAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.variableAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableAssignment([NotNull] MovieGrammarParser.VariableAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.tupleAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleAssignment([NotNull] MovieGrammarParser.TupleAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.tupleAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleAssignment([NotNull] MovieGrammarParser.TupleAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.variableTupleSeparation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableTupleSeparation([NotNull] MovieGrammarParser.VariableTupleSeparationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.variableTupleSeparation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableTupleSeparation([NotNull] MovieGrammarParser.VariableTupleSeparationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.tupleVar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleVar([NotNull] MovieGrammarParser.TupleVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.tupleVar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleVar([NotNull] MovieGrammarParser.TupleVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.tupleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleExpression([NotNull] MovieGrammarParser.TupleExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.tupleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleExpression([NotNull] MovieGrammarParser.TupleExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andOr</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndOr([NotNull] MovieGrammarParser.AndOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andOr</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndOr([NotNull] MovieGrammarParser.AndOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCastExpression([NotNull] MovieGrammarParser.CastExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCastExpression([NotNull] MovieGrammarParser.CastExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parentheses</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentheses([NotNull] MovieGrammarParser.ParenthesesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parentheses</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentheses([NotNull] MovieGrammarParser.ParenthesesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplyDivide</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplyDivide([NotNull] MovieGrammarParser.MultiplyDivideContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplyDivide</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplyDivide([NotNull] MovieGrammarParser.MultiplyDivideContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot([NotNull] MovieGrammarParser.NotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot([NotNull] MovieGrammarParser.NotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompare([NotNull] MovieGrammarParser.CompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompare([NotNull] MovieGrammarParser.CompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addSubtract</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubtract([NotNull] MovieGrammarParser.AddSubtractContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addSubtract</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubtract([NotNull] MovieGrammarParser.AddSubtractContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwise</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwise([NotNull] MovieGrammarParser.BitwiseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwise</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwise([NotNull] MovieGrammarParser.BitwiseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseShift</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwiseShift([NotNull] MovieGrammarParser.BitwiseShiftContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseShift</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwiseShift([NotNull] MovieGrammarParser.BitwiseShiftContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>terminator</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerminator([NotNull] MovieGrammarParser.TerminatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>terminator</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerminator([NotNull] MovieGrammarParser.TerminatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>flipSign</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFlipSign([NotNull] MovieGrammarParser.FlipSignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>flipSign</c>
	/// labeled alternative in <see cref="MovieGrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFlipSign([NotNull] MovieGrammarParser.FlipSignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.basicType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicType([NotNull] MovieGrammarParser.BasicTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.basicType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicType([NotNull] MovieGrammarParser.BasicTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] MovieGrammarParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] MovieGrammarParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.intType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntType([NotNull] MovieGrammarParser.IntTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.intType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntType([NotNull] MovieGrammarParser.IntTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.floatType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatType([NotNull] MovieGrammarParser.FloatTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.floatType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatType([NotNull] MovieGrammarParser.FloatTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.bool"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool([NotNull] MovieGrammarParser.BoolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.bool"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool([NotNull] MovieGrammarParser.BoolContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MovieGrammarParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MovieGrammarParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.elseIfStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseIfStatement([NotNull] MovieGrammarParser.ElseIfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.elseIfStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseIfStatement([NotNull] MovieGrammarParser.ElseIfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.elseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseStatement([NotNull] MovieGrammarParser.ElseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.elseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseStatement([NotNull] MovieGrammarParser.ElseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.methodCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodCall([NotNull] MovieGrammarParser.MethodCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.methodCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodCall([NotNull] MovieGrammarParser.MethodCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.methodCallArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodCallArgs([NotNull] MovieGrammarParser.MethodCallArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.methodCallArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodCallArgs([NotNull] MovieGrammarParser.MethodCallArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.methodDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDef([NotNull] MovieGrammarParser.MethodDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.methodDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDef([NotNull] MovieGrammarParser.MethodDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.methodDefArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDefArgs([NotNull] MovieGrammarParser.MethodDefArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.methodDefArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDefArgs([NotNull] MovieGrammarParser.MethodDefArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MovieGrammarParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop([NotNull] MovieGrammarParser.LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MovieGrammarParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop([NotNull] MovieGrammarParser.LoopContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}

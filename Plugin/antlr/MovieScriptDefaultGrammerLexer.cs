//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./MovieScriptDefaultGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTIONSEPARATOR=1, NEWLINE=2, SEMICOLON=3, DOLLAR=4, ASSIGN=5, PLUS_ASSIGN=6, 
		MINUS_ASSIGN=7, MULTIPLY_ASSIGN=8, DIVIDE_ASSIGN=9, MODULO_ASSIGN=10, 
		BREAK=11, CONTINUE=12, RETURN=13, IF=14, ELSE_IF=15, ELSE=16, FN=17, LOOP=18, 
		AND=19, OR=20, EQUAL=21, NOT_EQUAL=22, NOT=23, GREATER=24, LESS=25, GREATER_EQUAL=26, 
		LESS_EQUAL=27, AND_BINARY=28, OR_BINARY=29, XOR_BINARY=30, PLUS=31, MINUS=32, 
		MULTIPLY=33, DIVIDE=34, MODULO=35, SCOPE_OPEN=36, SCOPE_CLOSE=37, ROUND_BRACKET_OPEN=38, 
		ROUND_BRACKET_CLOSE=39, SQUARE_BRACKET_OPEN=40, SQUARE_BRACKET_CLOSE=41, 
		NUMBER=42, DOT=43, IDENTIFIER_STRING=44, TRUE=45, FALSE=46, STRING_LITERAL=47, 
		STRING_CHAR=48, ESCAPE_SEQUENCE=49, COMMA=50, WHITESPACE=51, COMMENT=52, 
		COMMENT_MULTI=53;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PIPE", "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", "DOLLAR", "ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", "MODULO_ASSIGN", 
		"BREAK", "CONTINUE", "RETURN", "IF", "ELSE_IF", "ELSE", "FN", "LOOP", 
		"AND", "OR", "EQUAL", "NOT_EQUAL", "NOT", "GREATER", "LESS", "GREATER_EQUAL", 
		"LESS_EQUAL", "AND_BINARY", "OR_BINARY", "XOR_BINARY", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"NUMBER", "DOT", "IDENTIFIER_STRING", "TRUE", "FALSE", "STRING_LITERAL", 
		"STRING_CHAR", "ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};


	public MovieScriptDefaultGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MovieScriptDefaultGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "';'", "'$'", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'break'", "'continue'", "'return'", "'if'", "'else if'", "'else'", 
		"'fn'", "'loop'", "'&&'", "'||'", "'=='", "'!='", "'!'", "'>'", "'<'", 
		"'>='", "'<='", "'&'", null, "'^'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", null, "'.'", null, "'true'", 
		"'false'", null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", "DOLLAR", "ASSIGN", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", "MODULO_ASSIGN", "BREAK", 
		"CONTINUE", "RETURN", "IF", "ELSE_IF", "ELSE", "FN", "LOOP", "AND", "OR", 
		"EQUAL", "NOT_EQUAL", "NOT", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
		"AND_BINARY", "OR_BINARY", "XOR_BINARY", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"NUMBER", "DOT", "IDENTIFIER_STRING", "TRUE", "FALSE", "STRING_LITERAL", 
		"STRING_CHAR", "ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MovieScriptDefaultGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,308,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,3,2,115,
		8,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
		8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,
		20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,
		32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,
		39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,5,44,244,8,44,
		10,44,12,44,247,9,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
		1,46,1,47,1,47,1,47,5,47,263,8,47,10,47,12,47,266,9,47,1,47,1,47,1,48,
		1,48,1,49,1,49,1,49,1,50,1,50,1,51,4,51,278,8,51,11,51,12,51,279,1,51,
		1,51,1,52,1,52,1,52,1,52,5,52,288,8,52,10,52,12,52,291,9,52,1,52,1,52,
		1,53,1,53,1,53,1,53,5,53,299,8,53,10,53,12,53,302,9,53,1,53,1,53,1,53,
		1,53,1,53,2,289,300,0,54,1,0,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,
		21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,
		45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,
		69,34,71,35,73,36,75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,
		93,46,95,47,97,48,99,49,101,50,103,51,105,52,107,53,1,0,6,1,0,48,57,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,34,34,92,92,94,94,
		8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,9,9,32,
		32,313,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,
		0,3,111,1,0,0,0,5,114,1,0,0,0,7,118,1,0,0,0,9,120,1,0,0,0,11,122,1,0,0,
		0,13,124,1,0,0,0,15,127,1,0,0,0,17,130,1,0,0,0,19,133,1,0,0,0,21,136,1,
		0,0,0,23,139,1,0,0,0,25,145,1,0,0,0,27,154,1,0,0,0,29,161,1,0,0,0,31,164,
		1,0,0,0,33,172,1,0,0,0,35,177,1,0,0,0,37,180,1,0,0,0,39,185,1,0,0,0,41,
		188,1,0,0,0,43,191,1,0,0,0,45,194,1,0,0,0,47,197,1,0,0,0,49,199,1,0,0,
		0,51,201,1,0,0,0,53,203,1,0,0,0,55,206,1,0,0,0,57,209,1,0,0,0,59,211,1,
		0,0,0,61,213,1,0,0,0,63,215,1,0,0,0,65,217,1,0,0,0,67,219,1,0,0,0,69,221,
		1,0,0,0,71,223,1,0,0,0,73,225,1,0,0,0,75,227,1,0,0,0,77,229,1,0,0,0,79,
		231,1,0,0,0,81,233,1,0,0,0,83,235,1,0,0,0,85,237,1,0,0,0,87,239,1,0,0,
		0,89,241,1,0,0,0,91,248,1,0,0,0,93,253,1,0,0,0,95,259,1,0,0,0,97,269,1,
		0,0,0,99,271,1,0,0,0,101,274,1,0,0,0,103,277,1,0,0,0,105,283,1,0,0,0,107,
		294,1,0,0,0,109,110,5,124,0,0,110,2,1,0,0,0,111,112,3,1,0,0,112,4,1,0,
		0,0,113,115,5,13,0,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,
		117,5,10,0,0,117,6,1,0,0,0,118,119,5,59,0,0,119,8,1,0,0,0,120,121,5,36,
		0,0,121,10,1,0,0,0,122,123,5,61,0,0,123,12,1,0,0,0,124,125,5,43,0,0,125,
		126,5,61,0,0,126,14,1,0,0,0,127,128,5,45,0,0,128,129,5,61,0,0,129,16,1,
		0,0,0,130,131,5,42,0,0,131,132,5,61,0,0,132,18,1,0,0,0,133,134,5,47,0,
		0,134,135,5,61,0,0,135,20,1,0,0,0,136,137,5,37,0,0,137,138,5,61,0,0,138,
		22,1,0,0,0,139,140,5,98,0,0,140,141,5,114,0,0,141,142,5,101,0,0,142,143,
		5,97,0,0,143,144,5,107,0,0,144,24,1,0,0,0,145,146,5,99,0,0,146,147,5,111,
		0,0,147,148,5,110,0,0,148,149,5,116,0,0,149,150,5,105,0,0,150,151,5,110,
		0,0,151,152,5,117,0,0,152,153,5,101,0,0,153,26,1,0,0,0,154,155,5,114,0,
		0,155,156,5,101,0,0,156,157,5,116,0,0,157,158,5,117,0,0,158,159,5,114,
		0,0,159,160,5,110,0,0,160,28,1,0,0,0,161,162,5,105,0,0,162,163,5,102,0,
		0,163,30,1,0,0,0,164,165,5,101,0,0,165,166,5,108,0,0,166,167,5,115,0,0,
		167,168,5,101,0,0,168,169,5,32,0,0,169,170,5,105,0,0,170,171,5,102,0,0,
		171,32,1,0,0,0,172,173,5,101,0,0,173,174,5,108,0,0,174,175,5,115,0,0,175,
		176,5,101,0,0,176,34,1,0,0,0,177,178,5,102,0,0,178,179,5,110,0,0,179,36,
		1,0,0,0,180,181,5,108,0,0,181,182,5,111,0,0,182,183,5,111,0,0,183,184,
		5,112,0,0,184,38,1,0,0,0,185,186,5,38,0,0,186,187,5,38,0,0,187,40,1,0,
		0,0,188,189,5,124,0,0,189,190,5,124,0,0,190,42,1,0,0,0,191,192,5,61,0,
		0,192,193,5,61,0,0,193,44,1,0,0,0,194,195,5,33,0,0,195,196,5,61,0,0,196,
		46,1,0,0,0,197,198,5,33,0,0,198,48,1,0,0,0,199,200,5,62,0,0,200,50,1,0,
		0,0,201,202,5,60,0,0,202,52,1,0,0,0,203,204,5,62,0,0,204,205,5,61,0,0,
		205,54,1,0,0,0,206,207,5,60,0,0,207,208,5,61,0,0,208,56,1,0,0,0,209,210,
		5,38,0,0,210,58,1,0,0,0,211,212,3,1,0,0,212,60,1,0,0,0,213,214,5,94,0,
		0,214,62,1,0,0,0,215,216,5,43,0,0,216,64,1,0,0,0,217,218,5,45,0,0,218,
		66,1,0,0,0,219,220,5,42,0,0,220,68,1,0,0,0,221,222,5,47,0,0,222,70,1,0,
		0,0,223,224,5,37,0,0,224,72,1,0,0,0,225,226,5,123,0,0,226,74,1,0,0,0,227,
		228,5,125,0,0,228,76,1,0,0,0,229,230,5,40,0,0,230,78,1,0,0,0,231,232,5,
		41,0,0,232,80,1,0,0,0,233,234,5,91,0,0,234,82,1,0,0,0,235,236,5,93,0,0,
		236,84,1,0,0,0,237,238,7,0,0,0,238,86,1,0,0,0,239,240,5,46,0,0,240,88,
		1,0,0,0,241,245,7,1,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,247,1,0,0,
		0,245,243,1,0,0,0,245,246,1,0,0,0,246,90,1,0,0,0,247,245,1,0,0,0,248,249,
		5,116,0,0,249,250,5,114,0,0,250,251,5,117,0,0,251,252,5,101,0,0,252,92,
		1,0,0,0,253,254,5,102,0,0,254,255,5,97,0,0,255,256,5,108,0,0,256,257,5,
		115,0,0,257,258,5,101,0,0,258,94,1,0,0,0,259,264,5,34,0,0,260,263,3,97,
		48,0,261,263,3,99,49,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,
		264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,
		5,34,0,0,268,96,1,0,0,0,269,270,7,3,0,0,270,98,1,0,0,0,271,272,5,92,0,
		0,272,273,7,4,0,0,273,100,1,0,0,0,274,275,5,44,0,0,275,102,1,0,0,0,276,
		278,7,5,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,
		0,0,0,280,281,1,0,0,0,281,282,6,51,0,0,282,104,1,0,0,0,283,284,5,47,0,
		0,284,285,5,47,0,0,285,289,1,0,0,0,286,288,9,0,0,0,287,286,1,0,0,0,288,
		291,1,0,0,0,289,290,1,0,0,0,289,287,1,0,0,0,290,292,1,0,0,0,291,289,1,
		0,0,0,292,293,6,52,0,0,293,106,1,0,0,0,294,295,5,47,0,0,295,296,5,42,0,
		0,296,300,1,0,0,0,297,299,9,0,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,
		301,1,0,0,0,300,298,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,
		42,0,0,304,305,5,47,0,0,305,306,1,0,0,0,306,307,6,53,0,0,307,108,1,0,0,
		0,8,0,114,245,262,264,279,289,300,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

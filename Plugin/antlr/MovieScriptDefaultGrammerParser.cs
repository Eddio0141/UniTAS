//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\source\repos\UniTAS\Plugin\MovieScriptDefaultGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTIONSEPARATOR=1, NEWLINE=2, SEMICOLON=3, DOLLAR=4, ASSIGN=5, PLUS_ASSIGN=6, 
		MINUS_ASSIGN=7, MULTIPLY_ASSIGN=8, DIVIDE_ASSIGN=9, MODULO_ASSIGN=10, 
		BREAK=11, CONTINUE=12, RETURN=13, IF=14, ELSE_IF=15, ELSE=16, FN=17, LOOP=18, 
		AND=19, OR=20, EQUAL=21, NOT_EQUAL=22, NOT=23, GREATER=24, LESS=25, GREATER_EQUAL=26, 
		LESS_EQUAL=27, AND_BINARY=28, OR_BINARY=29, XOR_BINARY=30, PLUS=31, MINUS=32, 
		MULTIPLY=33, DIVIDE=34, MODULO=35, SCOPE_OPEN=36, SCOPE_CLOSE=37, ROUND_BRACKET_OPEN=38, 
		ROUND_BRACKET_CLOSE=39, SQUARE_BRACKET_OPEN=40, SQUARE_BRACKET_CLOSE=41, 
		NUMBER=42, DOT=43, IDENTIFIER_STRING=44, TRUE=45, FALSE=46, STRING_LITERAL=47, 
		STRING_CHAR=48, ESCAPE_SEQUENCE=49, COMMA=50, WHITESPACE=51, COMMENT=52, 
		COMMENT_MULTI=53;
	public const int
		RULE_program = 0, RULE_actionSeparator = 1, RULE_action = 2, RULE_actionWithSeparator = 3, 
		RULE_frameAdvance = 4, RULE_breakAction = 5, RULE_continueAction = 6, 
		RULE_returnAction = 7, RULE_variable = 8, RULE_variableAssignment = 9, 
		RULE_variableTupleSeparation = 10, RULE_tupleExpression = 11, RULE_expression = 12, 
		RULE_mathOpType = 13, RULE_logicOpType = 14, RULE_binaryOpType = 15, RULE_intValue = 16, 
		RULE_intDigit = 17, RULE_floatValue = 18, RULE_floatDigit = 19, RULE_boolValue = 20, 
		RULE_string = 21, RULE_ifElse = 22, RULE_methodCall = 23, RULE_methodCallArgs = 24, 
		RULE_methodCallArgsSeparator = 25, RULE_methodDef = 26, RULE_methodName = 27, 
		RULE_methodDefArgs = 28, RULE_methodDefArgsSeparator = 29, RULE_scopeOpen = 30, 
		RULE_scopeClose = 31, RULE_loop = 32, RULE_roundBracketOpen = 33, RULE_roundBracketClose = 34, 
		RULE_squareBracketOpen = 35, RULE_squareBracketClose = 36, RULE_stringIdentifier = 37, 
		RULE_stringLiteral = 38, RULE_stringChar = 39;
	public static readonly string[] ruleNames = {
		"program", "actionSeparator", "action", "actionWithSeparator", "frameAdvance", 
		"breakAction", "continueAction", "returnAction", "variable", "variableAssignment", 
		"variableTupleSeparation", "tupleExpression", "expression", "mathOpType", 
		"logicOpType", "binaryOpType", "intValue", "intDigit", "floatValue", "floatDigit", 
		"boolValue", "string", "ifElse", "methodCall", "methodCallArgs", "methodCallArgsSeparator", 
		"methodDef", "methodName", "methodDefArgs", "methodDefArgsSeparator", 
		"scopeOpen", "scopeClose", "loop", "roundBracketOpen", "roundBracketClose", 
		"squareBracketOpen", "squareBracketClose", "stringIdentifier", "stringLiteral", 
		"stringChar"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "';'", "'$'", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'break'", "'continue'", "'return'", "'if'", "'else if'", "'else'", 
		"'fn'", "'loop'", "'&&'", "'||'", "'=='", "'!='", "'!'", "'>'", "'<'", 
		"'>='", "'<='", "'&'", null, "'^'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", null, "'.'", null, "'true'", 
		"'false'", null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", "DOLLAR", "ASSIGN", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", "MODULO_ASSIGN", "BREAK", 
		"CONTINUE", "RETURN", "IF", "ELSE_IF", "ELSE", "FN", "LOOP", "AND", "OR", 
		"EQUAL", "NOT_EQUAL", "NOT", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
		"AND_BINARY", "OR_BINARY", "XOR_BINARY", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"NUMBER", "DOT", "IDENTIFIER_STRING", "TRUE", "FALSE", "STRING_LITERAL", 
		"STRING_CHAR", "ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MovieScriptDefaultGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MovieScriptDefaultGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MovieScriptDefaultGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext actionWithSeparator() {
			return GetRuleContext<ActionWithSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext actionSeparator() {
			return GetRuleContext<ActionSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MovieScriptDefaultGrammerParser.NEWLINE, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOLLAR:
				case ROUND_BRACKET_OPEN:
				case IDENTIFIER_STRING:
					{
					State = 80;
					actionWithSeparator();
					State = 81;
					actionSeparator();
					}
					break;
				case SEMICOLON:
				case BREAK:
				case CONTINUE:
				case RETURN:
				case IF:
				case FN:
				case LOOP:
				case SCOPE_OPEN:
				case SCOPE_CLOSE:
					{
					State = 83;
					action();
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 84;
						Match(NEWLINE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 89;
				program();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOLLAR:
				case ROUND_BRACKET_OPEN:
				case IDENTIFIER_STRING:
					{
					State = 91;
					actionWithSeparator();
					}
					break;
				case SEMICOLON:
				case BREAK:
				case CONTINUE:
				case RETURN:
				case IF:
				case FN:
				case LOOP:
				case SCOPE_OPEN:
				case SCOPE_CLOSE:
					{
					State = 92;
					action();
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEWLINE) {
						{
						State = 93;
						Match(NEWLINE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIONSEPARATOR() { return GetToken(MovieScriptDefaultGrammerParser.ACTIONSEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MovieScriptDefaultGrammerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammerParser.SEMICOLON, 0); }
		public ActionSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterActionSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitActionSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionSeparatorContext actionSeparator() {
		ActionSeparatorContext _localctx = new ActionSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_actionSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefContext methodDef() {
			return GetRuleContext<MethodDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakActionContext breakAction() {
			return GetRuleContext<BreakActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueActionContext continueAction() {
			return GetRuleContext<ContinueActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnActionContext returnAction() {
			return GetRuleContext<ReturnActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_action);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				frameAdvance();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				ifElse();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				methodDef();
				}
				break;
			case SCOPE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				scopeOpen();
				}
				break;
			case SCOPE_CLOSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				scopeClose();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107;
				loop();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				breakAction();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 109;
				continueAction();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 110;
				returnAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTupleSeparationContext variableTupleSeparation() {
			return GetRuleContext<VariableTupleSeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ActionWithSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterActionWithSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitActionWithSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSeparatorContext actionWithSeparator() {
		ActionWithSeparatorContext _localctx = new ActionWithSeparatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_actionWithSeparator);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				variableAssignment();
				}
				break;
			case ROUND_BRACKET_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				variableTupleSeparation();
				}
				break;
			case IDENTIFIER_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameAdvanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammerParser.SEMICOLON, 0); }
		public FrameAdvanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameAdvance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterFrameAdvance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitFrameAdvance(this);
		}
	}

	[RuleVersion(0)]
	public FrameAdvanceContext frameAdvance() {
		FrameAdvanceContext _localctx = new FrameAdvanceContext(Context, State);
		EnterRule(_localctx, 8, RULE_frameAdvance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MovieScriptDefaultGrammerParser.BREAK, 0); }
		public BreakActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterBreakAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitBreakAction(this);
		}
	}

	[RuleVersion(0)]
	public BreakActionContext breakAction() {
		BreakActionContext _localctx = new BreakActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_breakAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MovieScriptDefaultGrammerParser.CONTINUE, 0); }
		public ContinueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterContinueAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitContinueAction(this);
		}
	}

	[RuleVersion(0)]
	public ContinueActionContext continueAction() {
		ContinueActionContext _localctx = new ContinueActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_continueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MovieScriptDefaultGrammerParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public ReturnActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterReturnAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitReturnAction(this);
		}
	}

	[RuleVersion(0)]
	public ReturnActionContext returnAction() {
		ReturnActionContext _localctx = new ReturnActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(RETURN);
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 125;
				expression(0);
				}
				break;
			case 2:
				{
				State = 126;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(MovieScriptDefaultGrammerParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(DOLLAR);
			State = 130;
			stringIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			variable();
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2016L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
			case NUMBER:
			case DOT:
			case IDENTIFIER_STRING:
			case TRUE:
			case FALSE:
			case STRING_LITERAL:
				{
				State = 134;
				expression(0);
				}
				break;
			case ROUND_BRACKET_OPEN:
				{
				State = 135;
				tupleExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTupleSeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammerParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammerParser.COMMA, i);
		}
		public VariableTupleSeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableTupleSeparation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterVariableTupleSeparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitVariableTupleSeparation(this);
		}
	}

	[RuleVersion(0)]
	public VariableTupleSeparationContext variableTupleSeparation() {
		VariableTupleSeparationContext _localctx = new VariableTupleSeparationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableTupleSeparation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			roundBracketOpen();
			State = 139;
			variable();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 140;
				Match(COMMA);
				State = 141;
				variable();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			roundBracketClose();
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2016L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 149;
				tupleExpression();
				}
				break;
			case IDENTIFIER_STRING:
				{
				State = 150;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammerParser.COMMA, i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_tupleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			roundBracketOpen();
			State = 154;
			expression(0);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 155;
				Match(COMMA);
				State = 156;
				expression(0);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			roundBracketClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolValueContext boolValue() {
			return GetRuleContext<BoolValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpTypeContext binaryOpType() {
			return GetRuleContext<BinaryOpTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathOpTypeContext mathOpType() {
			return GetRuleContext<MathOpTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOpTypeContext logicOpType() {
			return GetRuleContext<LogicOpTypeContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 165;
				variable();
				}
				break;
			case 2:
				{
				State = 166;
				intValue();
				}
				break;
			case 3:
				{
				State = 167;
				floatValue();
				}
				break;
			case 4:
				{
				State = 168;
				boolValue();
				}
				break;
			case 5:
				{
				State = 169;
				@string();
				}
				break;
			case 6:
				{
				State = 170;
				methodCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 185;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 174;
						binaryOpType();
						State = 175;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 178;
						mathOpType();
						State = 179;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 182;
						logicOpType();
						State = 183;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathOpTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MovieScriptDefaultGrammerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MovieScriptDefaultGrammerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(MovieScriptDefaultGrammerParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MovieScriptDefaultGrammerParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(MovieScriptDefaultGrammerParser.MODULO, 0); }
		public MathOpTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOpType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMathOpType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMathOpType(this);
		}
	}

	[RuleVersion(0)]
	public MathOpTypeContext mathOpType() {
		MathOpTypeContext _localctx = new MathOpTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_mathOpType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66571993088L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOpTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MovieScriptDefaultGrammerParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MovieScriptDefaultGrammerParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MovieScriptDefaultGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MovieScriptDefaultGrammerParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MovieScriptDefaultGrammerParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MovieScriptDefaultGrammerParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MovieScriptDefaultGrammerParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(MovieScriptDefaultGrammerParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(MovieScriptDefaultGrammerParser.LESS_EQUAL, 0); }
		public LogicOpTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOpType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterLogicOpType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitLogicOpType(this);
		}
	}

	[RuleVersion(0)]
	public LogicOpTypeContext logicOpType() {
		LogicOpTypeContext _localctx = new LogicOpTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_logicOpType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 267911168L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_BINARY() { return GetToken(MovieScriptDefaultGrammerParser.AND_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_BINARY() { return GetToken(MovieScriptDefaultGrammerParser.OR_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_BINARY() { return GetToken(MovieScriptDefaultGrammerParser.XOR_BINARY, 0); }
		public BinaryOpTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOpType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterBinaryOpType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitBinaryOpType(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpTypeContext binaryOpType() {
		BinaryOpTypeContext _localctx = new BinaryOpTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_binaryOpType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntDigitContext intDigit() {
			return GetRuleContext<IntDigitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		public IntValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
	}

	[RuleVersion(0)]
	public IntValueContext intValue() {
		IntValueContext _localctx = new IntValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_intValue);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				intDigit();
				State = 197;
				intValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				intDigit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MovieScriptDefaultGrammerParser.NUMBER, 0); }
		public IntDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterIntDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitIntDigit(this);
		}
	}

	[RuleVersion(0)]
	public IntDigitContext intDigit() {
		IntDigitContext _localctx = new IntDigitContext(Context, State);
		EnterRule(_localctx, 34, RULE_intDigit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatDigitContext floatDigit() {
			return GetRuleContext<FloatDigitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		public FloatValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterFloatValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitFloatValue(this);
		}
	}

	[RuleVersion(0)]
	public FloatValueContext floatValue() {
		FloatValueContext _localctx = new FloatValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_floatValue);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				floatDigit();
				State = 205;
				floatValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				floatDigit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MovieScriptDefaultGrammerParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MovieScriptDefaultGrammerParser.DOT, 0); }
		public FloatDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterFloatDigit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitFloatDigit(this);
		}
	}

	[RuleVersion(0)]
	public FloatDigitContext floatDigit() {
		FloatDigitContext _localctx = new FloatDigitContext(Context, State);
		EnterRule(_localctx, 38, RULE_floatDigit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==DOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MovieScriptDefaultGrammerParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MovieScriptDefaultGrammerParser.FALSE, 0); }
		public BoolValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterBoolValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitBoolValue(this);
		}
	}

	[RuleVersion(0)]
	public BoolValueContext boolValue() {
		BoolValueContext _localctx = new BoolValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_boolValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MovieScriptDefaultGrammerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext[] scopeOpen() {
			return GetRuleContexts<ScopeOpenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen(int i) {
			return GetRuleContext<ScopeOpenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext[] scopeClose() {
			return GetRuleContexts<ScopeCloseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose(int i) {
			return GetRuleContext<ScopeCloseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE_IF() { return GetTokens(MovieScriptDefaultGrammerParser.ELSE_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF(int i) {
			return GetToken(MovieScriptDefaultGrammerParser.ELSE_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MovieScriptDefaultGrammerParser.ELSE, 0); }
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 44, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(IF);
			State = 217;
			expression(0);
			State = 218;
			scopeOpen();
			State = 219;
			program();
			State = 220;
			scopeClose();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 221;
				Match(ELSE_IF);
				State = 222;
				expression(0);
				State = 223;
				scopeOpen();
				State = 224;
				program();
				State = 225;
				scopeClose();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 232;
				Match(ELSE);
				State = 233;
				scopeOpen();
				State = 234;
				program();
				State = 235;
				scopeClose();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			methodName();
			State = 240;
			roundBracketOpen();
			State = 241;
			methodCallArgs();
			State = 242;
			roundBracketClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsSeparatorContext methodCallArgsSeparator() {
			return GetRuleContext<MethodCallArgsSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodCallArgs);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				expression(0);
				State = 245;
				methodCallArgsSeparator();
				State = 246;
				methodCallArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammerParser.COMMA, 0); }
		public MethodCallArgsSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgsSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodCallArgsSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodCallArgsSeparator(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsSeparatorContext methodCallArgsSeparator() {
		MethodCallArgsSeparatorContext _localctx = new MethodCallArgsSeparatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodCallArgsSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(MovieScriptDefaultGrammerParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(FN);
			State = 254;
			methodName();
			State = 255;
			roundBracketOpen();
			State = 256;
			methodDefArgs();
			State = 257;
			roundBracketClose();
			State = 258;
			scopeOpen();
			State = 259;
			program();
			State = 260;
			scopeClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			stringIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsSeparatorContext methodDefArgsSeparator() {
			return GetRuleContext<MethodDefArgsSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodDefArgs);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				stringIdentifier();
				State = 265;
				methodDefArgsSeparator();
				State = 266;
				methodDefArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				stringIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammerParser.COMMA, 0); }
		public MethodDefArgsSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgsSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterMethodDefArgsSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitMethodDefArgsSeparator(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsSeparatorContext methodDefArgsSeparator() {
		MethodDefArgsSeparatorContext _localctx = new MethodDefArgsSeparatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodDefArgsSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammerParser.SCOPE_OPEN, 0); }
		public ScopeOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterScopeOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitScopeOpen(this);
		}
	}

	[RuleVersion(0)]
	public ScopeOpenContext scopeOpen() {
		ScopeOpenContext _localctx = new ScopeOpenContext(Context, State);
		EnterRule(_localctx, 60, RULE_scopeOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(SCOPE_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammerParser.SCOPE_CLOSE, 0); }
		public ScopeCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterScopeClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitScopeClose(this);
		}
	}

	[RuleVersion(0)]
	public ScopeCloseContext scopeClose() {
		ScopeCloseContext _localctx = new ScopeCloseContext(Context, State);
		EnterRule(_localctx, 62, RULE_scopeClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(MovieScriptDefaultGrammerParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 64, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(LOOP);
			State = 278;
			roundBracketOpen();
			State = 279;
			expression(0);
			State = 280;
			roundBracketClose();
			State = 281;
			scopeOpen();
			State = 282;
			program();
			State = 283;
			scopeClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundBracketOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammerParser.ROUND_BRACKET_OPEN, 0); }
		public RoundBracketOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundBracketOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterRoundBracketOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitRoundBracketOpen(this);
		}
	}

	[RuleVersion(0)]
	public RoundBracketOpenContext roundBracketOpen() {
		RoundBracketOpenContext _localctx = new RoundBracketOpenContext(Context, State);
		EnterRule(_localctx, 66, RULE_roundBracketOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(ROUND_BRACKET_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundBracketCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammerParser.ROUND_BRACKET_CLOSE, 0); }
		public RoundBracketCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundBracketClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterRoundBracketClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitRoundBracketClose(this);
		}
	}

	[RuleVersion(0)]
	public RoundBracketCloseContext roundBracketClose() {
		RoundBracketCloseContext _localctx = new RoundBracketCloseContext(Context, State);
		EnterRule(_localctx, 68, RULE_roundBracketClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareBracketOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammerParser.SQUARE_BRACKET_OPEN, 0); }
		public SquareBracketOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareBracketOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterSquareBracketOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitSquareBracketOpen(this);
		}
	}

	[RuleVersion(0)]
	public SquareBracketOpenContext squareBracketOpen() {
		SquareBracketOpenContext _localctx = new SquareBracketOpenContext(Context, State);
		EnterRule(_localctx, 70, RULE_squareBracketOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(SQUARE_BRACKET_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareBracketCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammerParser.SQUARE_BRACKET_CLOSE, 0); }
		public SquareBracketCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareBracketClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterSquareBracketClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitSquareBracketClose(this);
		}
	}

	[RuleVersion(0)]
	public SquareBracketCloseContext squareBracketClose() {
		SquareBracketCloseContext _localctx = new SquareBracketCloseContext(Context, State);
		EnterRule(_localctx, 72, RULE_squareBracketClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(SQUARE_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammerParser.IDENTIFIER_STRING, 0); }
		public StringIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterStringIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitStringIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public StringIdentifierContext stringIdentifier() {
		StringIdentifierContext _localctx = new StringIdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_stringIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(IDENTIFIER_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MovieScriptDefaultGrammerParser.STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHAR() { return GetToken(MovieScriptDefaultGrammerParser.STRING_CHAR, 0); }
		public StringCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.EnterStringChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammerListener typedListener = listener as IMovieScriptDefaultGrammerListener;
			if (typedListener != null) typedListener.ExitStringChar(this);
		}
	}

	[RuleVersion(0)]
	public StringCharContext stringChar() {
		StringCharContext _localctx = new StringCharContext(Context, State);
		EnterRule(_localctx, 78, RULE_stringChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(STRING_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,300,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,0,3,0,86,8,0,
		3,0,88,8,0,1,0,1,0,1,0,1,0,1,0,3,0,95,8,0,3,0,97,8,0,3,0,99,8,0,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,112,8,2,1,3,1,3,1,3,3,3,117,
		8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,128,8,7,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,3,9,137,8,9,1,10,1,10,1,10,1,10,5,10,143,8,10,10,10,12,10,146,
		9,10,1,10,1,10,1,10,1,10,3,10,152,8,10,1,11,1,11,1,11,1,11,5,11,158,8,
		11,10,11,12,11,161,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,172,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		5,12,186,8,12,10,12,12,12,189,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,16,1,16,3,16,201,8,16,1,17,1,17,1,18,1,18,1,18,1,18,3,18,209,8,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,5,22,228,8,22,10,22,12,22,231,9,22,1,22,1,22,1,22,1,
		22,1,22,3,22,238,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		3,24,250,8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,270,8,28,1,29,1,29,1,30,1,30,1,31,
		1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
		1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,0,1,24,40,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,0,7,1,0,1,3,1,0,5,10,1,0,31,35,1,0,19,
		27,1,0,28,30,1,0,42,43,1,0,45,46,294,0,98,1,0,0,0,2,100,1,0,0,0,4,111,
		1,0,0,0,6,116,1,0,0,0,8,118,1,0,0,0,10,120,1,0,0,0,12,122,1,0,0,0,14,124,
		1,0,0,0,16,129,1,0,0,0,18,132,1,0,0,0,20,138,1,0,0,0,22,153,1,0,0,0,24,
		171,1,0,0,0,26,190,1,0,0,0,28,192,1,0,0,0,30,194,1,0,0,0,32,200,1,0,0,
		0,34,202,1,0,0,0,36,208,1,0,0,0,38,210,1,0,0,0,40,212,1,0,0,0,42,214,1,
		0,0,0,44,216,1,0,0,0,46,239,1,0,0,0,48,249,1,0,0,0,50,251,1,0,0,0,52,253,
		1,0,0,0,54,262,1,0,0,0,56,269,1,0,0,0,58,271,1,0,0,0,60,273,1,0,0,0,62,
		275,1,0,0,0,64,277,1,0,0,0,66,285,1,0,0,0,68,287,1,0,0,0,70,289,1,0,0,
		0,72,291,1,0,0,0,74,293,1,0,0,0,76,295,1,0,0,0,78,297,1,0,0,0,80,81,3,
		6,3,0,81,82,3,2,1,0,82,88,1,0,0,0,83,85,3,4,2,0,84,86,5,2,0,0,85,84,1,
		0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,80,1,0,0,0,87,83,1,0,0,0,88,89,1,
		0,0,0,89,90,3,0,0,0,90,99,1,0,0,0,91,97,3,6,3,0,92,94,3,4,2,0,93,95,5,
		2,0,0,94,93,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,91,1,0,0,0,96,92,1,
		0,0,0,97,99,1,0,0,0,98,87,1,0,0,0,98,96,1,0,0,0,99,1,1,0,0,0,100,101,7,
		0,0,0,101,3,1,0,0,0,102,112,3,8,4,0,103,112,3,44,22,0,104,112,3,52,26,
		0,105,112,3,60,30,0,106,112,3,62,31,0,107,112,3,64,32,0,108,112,3,10,5,
		0,109,112,3,12,6,0,110,112,3,14,7,0,111,102,1,0,0,0,111,103,1,0,0,0,111,
		104,1,0,0,0,111,105,1,0,0,0,111,106,1,0,0,0,111,107,1,0,0,0,111,108,1,
		0,0,0,111,109,1,0,0,0,111,110,1,0,0,0,112,5,1,0,0,0,113,117,3,18,9,0,114,
		117,3,20,10,0,115,117,3,46,23,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,
		1,0,0,0,117,7,1,0,0,0,118,119,5,3,0,0,119,9,1,0,0,0,120,121,5,11,0,0,121,
		11,1,0,0,0,122,123,5,12,0,0,123,13,1,0,0,0,124,127,5,13,0,0,125,128,3,
		24,12,0,126,128,3,22,11,0,127,125,1,0,0,0,127,126,1,0,0,0,127,128,1,0,
		0,0,128,15,1,0,0,0,129,130,5,4,0,0,130,131,3,74,37,0,131,17,1,0,0,0,132,
		133,3,16,8,0,133,136,7,1,0,0,134,137,3,24,12,0,135,137,3,22,11,0,136,134,
		1,0,0,0,136,135,1,0,0,0,137,19,1,0,0,0,138,139,3,66,33,0,139,144,3,16,
		8,0,140,141,5,50,0,0,141,143,3,16,8,0,142,140,1,0,0,0,143,146,1,0,0,0,
		144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,
		3,68,34,0,148,151,7,1,0,0,149,152,3,22,11,0,150,152,3,46,23,0,151,149,
		1,0,0,0,151,150,1,0,0,0,152,21,1,0,0,0,153,154,3,66,33,0,154,159,3,24,
		12,0,155,156,5,50,0,0,156,158,3,24,12,0,157,155,1,0,0,0,158,161,1,0,0,
		0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,
		163,3,68,34,0,163,23,1,0,0,0,164,165,6,12,-1,0,165,172,3,16,8,0,166,172,
		3,32,16,0,167,172,3,36,18,0,168,172,3,40,20,0,169,172,3,42,21,0,170,172,
		3,46,23,0,171,164,1,0,0,0,171,166,1,0,0,0,171,167,1,0,0,0,171,168,1,0,
		0,0,171,169,1,0,0,0,171,170,1,0,0,0,172,187,1,0,0,0,173,174,10,9,0,0,174,
		175,3,30,15,0,175,176,3,24,12,10,176,186,1,0,0,0,177,178,10,8,0,0,178,
		179,3,26,13,0,179,180,3,24,12,9,180,186,1,0,0,0,181,182,10,7,0,0,182,183,
		3,28,14,0,183,184,3,24,12,8,184,186,1,0,0,0,185,173,1,0,0,0,185,177,1,
		0,0,0,185,181,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,
		188,25,1,0,0,0,189,187,1,0,0,0,190,191,7,2,0,0,191,27,1,0,0,0,192,193,
		7,3,0,0,193,29,1,0,0,0,194,195,7,4,0,0,195,31,1,0,0,0,196,197,3,34,17,
		0,197,198,3,32,16,0,198,201,1,0,0,0,199,201,3,34,17,0,200,196,1,0,0,0,
		200,199,1,0,0,0,201,33,1,0,0,0,202,203,5,42,0,0,203,35,1,0,0,0,204,205,
		3,38,19,0,205,206,3,36,18,0,206,209,1,0,0,0,207,209,3,38,19,0,208,204,
		1,0,0,0,208,207,1,0,0,0,209,37,1,0,0,0,210,211,7,5,0,0,211,39,1,0,0,0,
		212,213,7,6,0,0,213,41,1,0,0,0,214,215,3,76,38,0,215,43,1,0,0,0,216,217,
		5,14,0,0,217,218,3,24,12,0,218,219,3,60,30,0,219,220,3,0,0,0,220,229,3,
		62,31,0,221,222,5,15,0,0,222,223,3,24,12,0,223,224,3,60,30,0,224,225,3,
		0,0,0,225,226,3,62,31,0,226,228,1,0,0,0,227,221,1,0,0,0,228,231,1,0,0,
		0,229,227,1,0,0,0,229,230,1,0,0,0,230,237,1,0,0,0,231,229,1,0,0,0,232,
		233,5,16,0,0,233,234,3,60,30,0,234,235,3,0,0,0,235,236,3,62,31,0,236,238,
		1,0,0,0,237,232,1,0,0,0,237,238,1,0,0,0,238,45,1,0,0,0,239,240,3,54,27,
		0,240,241,3,66,33,0,241,242,3,48,24,0,242,243,3,68,34,0,243,47,1,0,0,0,
		244,245,3,24,12,0,245,246,3,50,25,0,246,247,3,48,24,0,247,250,1,0,0,0,
		248,250,3,24,12,0,249,244,1,0,0,0,249,248,1,0,0,0,250,49,1,0,0,0,251,252,
		5,50,0,0,252,51,1,0,0,0,253,254,5,17,0,0,254,255,3,54,27,0,255,256,3,66,
		33,0,256,257,3,56,28,0,257,258,3,68,34,0,258,259,3,60,30,0,259,260,3,0,
		0,0,260,261,3,62,31,0,261,53,1,0,0,0,262,263,3,74,37,0,263,55,1,0,0,0,
		264,265,3,74,37,0,265,266,3,58,29,0,266,267,3,56,28,0,267,270,1,0,0,0,
		268,270,3,74,37,0,269,264,1,0,0,0,269,268,1,0,0,0,270,57,1,0,0,0,271,272,
		5,50,0,0,272,59,1,0,0,0,273,274,5,36,0,0,274,61,1,0,0,0,275,276,5,37,0,
		0,276,63,1,0,0,0,277,278,5,18,0,0,278,279,3,66,33,0,279,280,3,24,12,0,
		280,281,3,68,34,0,281,282,3,60,30,0,282,283,3,0,0,0,283,284,3,62,31,0,
		284,65,1,0,0,0,285,286,5,38,0,0,286,67,1,0,0,0,287,288,5,39,0,0,288,69,
		1,0,0,0,289,290,5,40,0,0,290,71,1,0,0,0,291,292,5,41,0,0,292,73,1,0,0,
		0,293,294,5,44,0,0,294,75,1,0,0,0,295,296,5,47,0,0,296,77,1,0,0,0,297,
		298,5,48,0,0,298,79,1,0,0,0,21,85,87,94,96,98,111,116,127,136,144,151,
		159,171,185,187,200,208,229,237,249,269
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

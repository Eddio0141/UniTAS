//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MovieScriptDefaultGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ACTIONSEPARATOR=11, NEWLINE=12, SEMICOLON=13, DOLLAR=14, ASSIGN=15, 
		PLUS_ASSIGN=16, MINUS_ASSIGN=17, MULTIPLY_ASSIGN=18, DIVIDE_ASSIGN=19, 
		MODULO_ASSIGN=20, AND=21, OR=22, EQUAL=23, NOT_EQUAL=24, NOT=25, GREATER=26, 
		LESS=27, GREATER_EQUAL=28, LESS_EQUAL=29, BITWISE_AND=30, BITWISE_OR=31, 
		BITWISE_XOR=32, BITWISE_SHIFT_LEFT=33, BITWISE_SHIFT_RIGHT=34, PLUS=35, 
		MINUS=36, MULTIPLY=37, DIVIDE=38, MODULO=39, SCOPE_OPEN=40, SCOPE_CLOSE=41, 
		ROUND_BRACKET_OPEN=42, ROUND_BRACKET_CLOSE=43, SQUARE_BRACKET_OPEN=44, 
		SQUARE_BRACKET_CLOSE=45, INT=46, FLOAT=47, IDENTIFIER_STRING=48, STRING_LITERAL=49, 
		STRING_CHAR=50, ESCAPE_SEQUENCE=51, COMMA=52, WHITESPACE=53, COMMENT=54, 
		COMMENT_MULTI=55;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "PIPE", "DOT", "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", "DOLLAR", 
		"ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", 
		"MODULO_ASSIGN", "AND", "OR", "EQUAL", "NOT_EQUAL", "NOT", "GREATER", 
		"LESS", "GREATER_EQUAL", "LESS_EQUAL", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", 
		"BITWISE_SHIFT_LEFT", "BITWISE_SHIFT_RIGHT", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"INT", "FLOAT", "IDENTIFIER_STRING", "STRING_LITERAL", "STRING_CHAR", 
		"ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};


	public MovieScriptDefaultGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MovieScriptDefaultGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'continue'", "'return'", "'true'", "'false'", "'if'", 
		"'else if'", "'else'", "'fn'", "'loop'", null, null, "';'", "'$'", "'='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'&&'", "'||'", "'=='", "'!='", 
		"'!'", "'>'", "'<'", "'>='", "'<='", "'&'", null, "'^'", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", null, null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ACTIONSEPARATOR", 
		"NEWLINE", "SEMICOLON", "DOLLAR", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", "MODULO_ASSIGN", "AND", "OR", "EQUAL", 
		"NOT_EQUAL", "NOT", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
		"BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "BITWISE_SHIFT_LEFT", "BITWISE_SHIFT_RIGHT", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", 
		"ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"INT", "FLOAT", "IDENTIFIER_STRING", "STRING_LITERAL", "STRING_CHAR", 
		"ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MovieScriptDefaultGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,55,340,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,3,13,180,8,13,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
		1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
		1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
		1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,
		1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
		1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,3,47,264,8,
		47,1,47,4,47,267,8,47,11,47,12,47,268,1,48,3,48,272,8,48,1,48,4,48,275,
		8,48,11,48,12,48,276,1,48,1,48,4,48,281,8,48,11,48,12,48,282,1,49,1,49,
		5,49,287,8,49,10,49,12,49,290,9,49,1,50,1,50,1,50,5,50,295,8,50,10,50,
		12,50,298,9,50,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,4,54,
		310,8,54,11,54,12,54,311,1,54,1,54,1,55,1,55,1,55,1,55,5,55,320,8,55,10,
		55,12,55,323,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,331,8,56,10,56,12,
		56,334,9,56,1,56,1,56,1,56,1,56,1,56,2,321,332,0,57,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,0,23,0,25,11,27,12,29,13,31,14,33,15,35,
		16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,
		28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,
		40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,51,
		107,52,109,53,111,54,113,55,1,0,6,1,0,48,57,3,0,65,90,95,95,97,122,4,0,
		48,57,65,90,95,95,97,122,3,0,34,34,92,92,94,94,8,0,34,34,39,39,92,92,98,
		98,102,102,110,110,114,114,116,116,2,0,9,9,32,32,349,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,
		0,0,0,3,121,1,0,0,0,5,130,1,0,0,0,7,137,1,0,0,0,9,142,1,0,0,0,11,148,1,
		0,0,0,13,151,1,0,0,0,15,159,1,0,0,0,17,164,1,0,0,0,19,167,1,0,0,0,21,172,
		1,0,0,0,23,174,1,0,0,0,25,176,1,0,0,0,27,179,1,0,0,0,29,183,1,0,0,0,31,
		185,1,0,0,0,33,187,1,0,0,0,35,189,1,0,0,0,37,192,1,0,0,0,39,195,1,0,0,
		0,41,198,1,0,0,0,43,201,1,0,0,0,45,204,1,0,0,0,47,207,1,0,0,0,49,210,1,
		0,0,0,51,213,1,0,0,0,53,216,1,0,0,0,55,218,1,0,0,0,57,220,1,0,0,0,59,222,
		1,0,0,0,61,225,1,0,0,0,63,228,1,0,0,0,65,230,1,0,0,0,67,232,1,0,0,0,69,
		234,1,0,0,0,71,237,1,0,0,0,73,240,1,0,0,0,75,242,1,0,0,0,77,244,1,0,0,
		0,79,246,1,0,0,0,81,248,1,0,0,0,83,250,1,0,0,0,85,252,1,0,0,0,87,254,1,
		0,0,0,89,256,1,0,0,0,91,258,1,0,0,0,93,260,1,0,0,0,95,263,1,0,0,0,97,271,
		1,0,0,0,99,284,1,0,0,0,101,291,1,0,0,0,103,301,1,0,0,0,105,303,1,0,0,0,
		107,306,1,0,0,0,109,309,1,0,0,0,111,315,1,0,0,0,113,326,1,0,0,0,115,116,
		5,98,0,0,116,117,5,114,0,0,117,118,5,101,0,0,118,119,5,97,0,0,119,120,
		5,107,0,0,120,2,1,0,0,0,121,122,5,99,0,0,122,123,5,111,0,0,123,124,5,110,
		0,0,124,125,5,116,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,5,117,
		0,0,128,129,5,101,0,0,129,4,1,0,0,0,130,131,5,114,0,0,131,132,5,101,0,
		0,132,133,5,116,0,0,133,134,5,117,0,0,134,135,5,114,0,0,135,136,5,110,
		0,0,136,6,1,0,0,0,137,138,5,116,0,0,138,139,5,114,0,0,139,140,5,117,0,
		0,140,141,5,101,0,0,141,8,1,0,0,0,142,143,5,102,0,0,143,144,5,97,0,0,144,
		145,5,108,0,0,145,146,5,115,0,0,146,147,5,101,0,0,147,10,1,0,0,0,148,149,
		5,105,0,0,149,150,5,102,0,0,150,12,1,0,0,0,151,152,5,101,0,0,152,153,5,
		108,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,156,5,32,0,0,156,157,5,
		105,0,0,157,158,5,102,0,0,158,14,1,0,0,0,159,160,5,101,0,0,160,161,5,108,
		0,0,161,162,5,115,0,0,162,163,5,101,0,0,163,16,1,0,0,0,164,165,5,102,0,
		0,165,166,5,110,0,0,166,18,1,0,0,0,167,168,5,108,0,0,168,169,5,111,0,0,
		169,170,5,111,0,0,170,171,5,112,0,0,171,20,1,0,0,0,172,173,5,124,0,0,173,
		22,1,0,0,0,174,175,5,46,0,0,175,24,1,0,0,0,176,177,3,21,10,0,177,26,1,
		0,0,0,178,180,5,13,0,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,
		181,182,5,10,0,0,182,28,1,0,0,0,183,184,5,59,0,0,184,30,1,0,0,0,185,186,
		5,36,0,0,186,32,1,0,0,0,187,188,5,61,0,0,188,34,1,0,0,0,189,190,5,43,0,
		0,190,191,5,61,0,0,191,36,1,0,0,0,192,193,5,45,0,0,193,194,5,61,0,0,194,
		38,1,0,0,0,195,196,5,42,0,0,196,197,5,61,0,0,197,40,1,0,0,0,198,199,5,
		47,0,0,199,200,5,61,0,0,200,42,1,0,0,0,201,202,5,37,0,0,202,203,5,61,0,
		0,203,44,1,0,0,0,204,205,5,38,0,0,205,206,5,38,0,0,206,46,1,0,0,0,207,
		208,5,124,0,0,208,209,5,124,0,0,209,48,1,0,0,0,210,211,5,61,0,0,211,212,
		5,61,0,0,212,50,1,0,0,0,213,214,5,33,0,0,214,215,5,61,0,0,215,52,1,0,0,
		0,216,217,5,33,0,0,217,54,1,0,0,0,218,219,5,62,0,0,219,56,1,0,0,0,220,
		221,5,60,0,0,221,58,1,0,0,0,222,223,5,62,0,0,223,224,5,61,0,0,224,60,1,
		0,0,0,225,226,5,60,0,0,226,227,5,61,0,0,227,62,1,0,0,0,228,229,5,38,0,
		0,229,64,1,0,0,0,230,231,3,21,10,0,231,66,1,0,0,0,232,233,5,94,0,0,233,
		68,1,0,0,0,234,235,5,60,0,0,235,236,5,60,0,0,236,70,1,0,0,0,237,238,5,
		62,0,0,238,239,5,62,0,0,239,72,1,0,0,0,240,241,5,43,0,0,241,74,1,0,0,0,
		242,243,5,45,0,0,243,76,1,0,0,0,244,245,5,42,0,0,245,78,1,0,0,0,246,247,
		5,47,0,0,247,80,1,0,0,0,248,249,5,37,0,0,249,82,1,0,0,0,250,251,5,123,
		0,0,251,84,1,0,0,0,252,253,5,125,0,0,253,86,1,0,0,0,254,255,5,40,0,0,255,
		88,1,0,0,0,256,257,5,41,0,0,257,90,1,0,0,0,258,259,5,91,0,0,259,92,1,0,
		0,0,260,261,5,93,0,0,261,94,1,0,0,0,262,264,5,45,0,0,263,262,1,0,0,0,263,
		264,1,0,0,0,264,266,1,0,0,0,265,267,7,0,0,0,266,265,1,0,0,0,267,268,1,
		0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,96,1,0,0,0,270,272,5,45,0,0,
		271,270,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,275,7,0,0,0,274,273,
		1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,
		0,278,280,3,23,11,0,279,281,7,0,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,
		280,1,0,0,0,282,283,1,0,0,0,283,98,1,0,0,0,284,288,7,1,0,0,285,287,7,2,
		0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
		100,1,0,0,0,290,288,1,0,0,0,291,296,5,34,0,0,292,295,3,103,51,0,293,295,
		3,105,52,0,294,292,1,0,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,
		0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,300,5,34,0,0,300,
		102,1,0,0,0,301,302,7,3,0,0,302,104,1,0,0,0,303,304,5,92,0,0,304,305,7,
		4,0,0,305,106,1,0,0,0,306,307,5,44,0,0,307,108,1,0,0,0,308,310,7,5,0,0,
		309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,313,
		1,0,0,0,313,314,6,54,0,0,314,110,1,0,0,0,315,316,5,47,0,0,316,317,5,47,
		0,0,317,321,1,0,0,0,318,320,9,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,
		322,1,0,0,0,321,319,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,6,
		55,0,0,325,112,1,0,0,0,326,327,5,47,0,0,327,328,5,42,0,0,328,332,1,0,0,
		0,329,331,9,0,0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,333,1,0,0,0,332,
		330,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,336,5,42,0,0,336,337,5,
		47,0,0,337,338,1,0,0,0,338,339,6,56,0,0,339,114,1,0,0,0,13,0,179,263,268,
		271,276,282,288,294,296,311,321,332,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

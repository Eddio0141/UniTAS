//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MovieScriptDefaultGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, WHITESPACE=11, COMMENT=12, COMMENT_MULTI=13, ACTIONSEPARATOR=14, 
		NEWLINE=15, SEMICOLON=16, DOLLAR=17, ASSIGN=18, PLUS_ASSIGN=19, MINUS_ASSIGN=20, 
		MULTIPLY_ASSIGN=21, DIVIDE_ASSIGN=22, MODULO_ASSIGN=23, AND=24, OR=25, 
		EQUAL=26, NOT_EQUAL=27, NOT=28, GREATER=29, LESS=30, GREATER_EQUAL=31, 
		LESS_EQUAL=32, BITWISE_AND=33, BITWISE_OR=34, BITWISE_XOR=35, BITWISE_SHIFT_LEFT=36, 
		BITWISE_SHIFT_RIGHT=37, PLUS=38, MINUS=39, MULTIPLY=40, DIVIDE=41, MODULO=42, 
		SCOPE_OPEN=43, SCOPE_CLOSE=44, ROUND_BRACKET_OPEN=45, ROUND_BRACKET_CLOSE=46, 
		INT=47, FLOAT=48, IDENTIFIER_STRING=49, STRING=50, COMMA=51, ANY=52;
	public const int
		RULE_script = 0, RULE_program = 1, RULE_actionSeparator = 2, RULE_action = 3, 
		RULE_scopeOpen = 4, RULE_scopeClose = 5, RULE_actionWithSeparator = 6, 
		RULE_frameAdvance = 7, RULE_breakAction = 8, RULE_continueAction = 9, 
		RULE_returnAction = 10, RULE_variable = 11, RULE_variableAssignment = 12, 
		RULE_tupleAssignment = 13, RULE_variableTupleSeparation = 14, RULE_tupleExpression = 15, 
		RULE_expression = 16, RULE_string = 17, RULE_intType = 18, RULE_floatType = 19, 
		RULE_bool = 20, RULE_ifElse = 21, RULE_methodCall = 22, RULE_methodCallArgs = 23, 
		RULE_methodDef = 24, RULE_methodDefArgs = 25, RULE_loop = 26;
	public static readonly string[] ruleNames = {
		"script", "program", "actionSeparator", "action", "scopeOpen", "scopeClose", 
		"actionWithSeparator", "frameAdvance", "breakAction", "continueAction", 
		"returnAction", "variable", "variableAssignment", "tupleAssignment", "variableTupleSeparation", 
		"tupleExpression", "expression", "string", "intType", "floatType", "bool", 
		"ifElse", "methodCall", "methodCallArgs", "methodDef", "methodDefArgs", 
		"loop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'continue'", "'return'", "'true'", "'false'", "'if'", 
		"'else if'", "'else'", "'fn'", "'loop'", null, null, null, null, null, 
		"';'", "'$'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&&'", "'||'", 
		"'=='", "'!='", "'!'", "'>'", "'<'", "'>='", "'<='", "'&'", null, "'^'", 
		"'<<'", "'>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", 
		"')'", null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "WHITESPACE", 
		"COMMENT", "COMMENT_MULTI", "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", 
		"DOLLAR", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", 
		"DIVIDE_ASSIGN", "MODULO_ASSIGN", "AND", "OR", "EQUAL", "NOT_EQUAL", "NOT", 
		"GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", "BITWISE_AND", "BITWISE_OR", 
		"BITWISE_XOR", "BITWISE_SHIFT_LEFT", "BITWISE_SHIFT_RIGHT", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "INT", "FLOAT", "IDENTIFIER_STRING", "STRING", 
		"COMMA", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MovieScriptDefaultGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MovieScriptDefaultGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MovieScriptDefaultGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MovieScriptDefaultGrammarParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			program();
			State = 55;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext[] actionWithSeparator() {
			return GetRuleContexts<ActionWithSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext actionWithSeparator(int i) {
			return GetRuleContext<ActionWithSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext[] actionSeparator() {
			return GetRuleContexts<ActionSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext actionSeparator(int i) {
			return GetRuleContext<ActionSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 67;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
					case ROUND_BRACKET_OPEN:
					case IDENTIFIER_STRING:
						{
						State = 57;
						actionWithSeparator();
						State = 58;
						actionSeparator();
						}
						break;
					case T__0:
					case T__1:
					case T__2:
					case T__5:
					case T__8:
					case T__9:
					case SEMICOLON:
					case SCOPE_OPEN:
					case SCOPE_CLOSE:
						{
						State = 60;
						action();
						State = 64;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 61;
							Match(NEWLINE);
							}
							}
							State = 66;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIONSEPARATOR() { return GetToken(MovieScriptDefaultGrammarParser.ACTIONSEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		public ActionSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionSeparatorContext actionSeparator() {
		ActionSeparatorContext _localctx = new ActionSeparatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_actionSeparator);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACTIONSEPARATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				Match(ACTIONSEPARATOR);
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				Match(NEWLINE);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				frameAdvance();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefContext methodDef() {
			return GetRuleContext<MethodDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakActionContext breakAction() {
			return GetRuleContext<BreakActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueActionContext continueAction() {
			return GetRuleContext<ContinueActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnActionContext returnAction() {
			return GetRuleContext<ReturnActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 6, RULE_action);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				frameAdvance();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				ifElse();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				methodDef();
				}
				break;
			case SCOPE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				scopeOpen();
				}
				break;
			case SCOPE_CLOSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				scopeClose();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				loop();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 7);
				{
				State = 83;
				breakAction();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 84;
				continueAction();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 9);
				{
				State = 85;
				returnAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		public ScopeOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeOpen(this);
		}
	}

	[RuleVersion(0)]
	public ScopeOpenContext scopeOpen() {
		ScopeOpenContext _localctx = new ScopeOpenContext(Context, State);
		EnterRule(_localctx, 8, RULE_scopeOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(SCOPE_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		public ScopeCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeClose(this);
		}
	}

	[RuleVersion(0)]
	public ScopeCloseContext scopeClose() {
		ScopeCloseContext _localctx = new ScopeCloseContext(Context, State);
		EnterRule(_localctx, 10, RULE_scopeClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleAssignmentContext tupleAssignment() {
			return GetRuleContext<TupleAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTupleSeparationContext variableTupleSeparation() {
			return GetRuleContext<VariableTupleSeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ActionWithSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionWithSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionWithSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSeparatorContext actionWithSeparator() {
		ActionWithSeparatorContext _localctx = new ActionWithSeparatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_actionWithSeparator);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				variableAssignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				tupleAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				variableTupleSeparation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				methodCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameAdvanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammarParser.SEMICOLON, 0); }
		public FrameAdvanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameAdvance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFrameAdvance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFrameAdvance(this);
		}
	}

	[RuleVersion(0)]
	public FrameAdvanceContext frameAdvance() {
		FrameAdvanceContext _localctx = new FrameAdvanceContext(Context, State);
		EnterRule(_localctx, 14, RULE_frameAdvance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakActionContext : ParserRuleContext {
		public BreakActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBreakAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBreakAction(this);
		}
	}

	[RuleVersion(0)]
	public BreakActionContext breakAction() {
		BreakActionContext _localctx = new BreakActionContext(Context, State);
		EnterRule(_localctx, 16, RULE_breakAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueActionContext : ParserRuleContext {
		public ContinueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterContinueAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitContinueAction(this);
		}
	}

	[RuleVersion(0)]
	public ContinueActionContext continueAction() {
		ContinueActionContext _localctx = new ContinueActionContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public ReturnActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterReturnAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitReturnAction(this);
		}
	}

	[RuleVersion(0)]
	public ReturnActionContext returnAction() {
		ReturnActionContext _localctx = new ReturnActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__2);
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 105;
				expression(0);
				}
				break;
			case 2:
				{
				State = 106;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(MovieScriptDefaultGrammarParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(DOLLAR);
			State = 110;
			Match(IDENTIFIER_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			variable();
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MULTIPLY_ASSIGN) | (1L << DIVIDE_ASSIGN) | (1L << MODULO_ASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 114;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public TupleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterTupleAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitTupleAssignment(this);
		}
	}

	[RuleVersion(0)]
	public TupleAssignmentContext tupleAssignment() {
		TupleAssignmentContext _localctx = new TupleAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_tupleAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			variable();
			State = 117;
			Match(ASSIGN);
			State = 118;
			tupleExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTupleSeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public VariableTupleSeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableTupleSeparation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableTupleSeparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableTupleSeparation(this);
		}
	}

	[RuleVersion(0)]
	public VariableTupleSeparationContext variableTupleSeparation() {
		VariableTupleSeparationContext _localctx = new VariableTupleSeparationContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableTupleSeparation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(ROUND_BRACKET_OPEN);
			State = 121;
			variable();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 122;
				Match(COMMA);
				State = 123;
				variable();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(ROUND_BRACKET_CLOSE);
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MULTIPLY_ASSIGN) | (1L << DIVIDE_ASSIGN) | (1L << MODULO_ASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 131;
				tupleExpression();
				}
				break;
			case IDENTIFIER_STRING:
				{
				State = 132;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext[] tupleExpression() {
			return GetRuleContexts<TupleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression(int i) {
			return GetRuleContext<TupleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_tupleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(ROUND_BRACKET_OPEN);
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 136;
				expression(0);
				}
				break;
			case 2:
				{
				State = 137;
				tupleExpression();
				}
				break;
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 140;
				Match(COMMA);
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 141;
					expression(0);
					}
					break;
				case 2:
					{
					State = 142;
					tupleExpression();
					}
					break;
				}
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 149;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MovieScriptDefaultGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MovieScriptDefaultGrammarParser.OR, 0); }
		public AndOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterAndOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitAndOr(this);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
	}
	public partial class MultiplyDivideContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(MovieScriptDefaultGrammarParser.MODULO, 0); }
		public MultiplyDivideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplyDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplyDivide(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MovieScriptDefaultGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MovieScriptDefaultGrammarParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MovieScriptDefaultGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.GREATER_EQUAL, 0); }
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
	}
	public partial class AddSubtractContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MovieScriptDefaultGrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MovieScriptDefaultGrammarParser.MINUS, 0); }
		public AddSubtractContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterAddSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitAddSubtract(this);
		}
	}
	public partial class BitwiseContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_XOR, 0); }
		public BitwiseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBitwise(this);
		}
	}
	public partial class BitwiseShiftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_LEFT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_RIGHT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_RIGHT, 0); }
		public BitwiseShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBitwiseShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBitwiseShift(this);
		}
	}
	public partial class TerminatorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeContext intType() {
			return GetRuleContext<IntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatTypeContext floatType() {
			return GetRuleContext<FloatTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public TerminatorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitTerminator(this);
		}
	}
	public partial class FlipSignContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MovieScriptDefaultGrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FlipSignContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFlipSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFlipSign(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				{
				_localctx = new FlipSignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 152;
				Match(MINUS);
				State = 153;
				expression(10);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 154;
				Match(NOT);
				State = 155;
				expression(7);
				}
				break;
			case ROUND_BRACKET_OPEN:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 156;
				Match(ROUND_BRACKET_OPEN);
				State = 157;
				expression(0);
				State = 158;
				Match(ROUND_BRACKET_CLOSE);
				}
				break;
			case T__3:
			case T__4:
			case DOLLAR:
			case INT:
			case FLOAT:
			case IDENTIFIER_STRING:
			case STRING:
				{
				_localctx = new TerminatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOLLAR:
					{
					State = 160;
					variable();
					}
					break;
				case INT:
					{
					State = 161;
					intType();
					}
					break;
				case FLOAT:
					{
					State = 162;
					floatType();
					}
					break;
				case T__3:
				case T__4:
					{
					State = 163;
					@bool();
					}
					break;
				case STRING:
					{
					State = 164;
					@string();
					}
					break;
				case IDENTIFIER_STRING:
					{
					State = 165;
					methodCall();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 188;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new MultiplyDivideContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplyDivideContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 171;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << MODULO))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 172;
						((MultiplyDivideContext)_localctx).right = expression(10);
						}
						break;
					case 2:
						{
						_localctx = new AddSubtractContext(new ExpressionContext(_parentctx, _parentState));
						((AddSubtractContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 174;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 175;
						((AddSubtractContext)_localctx).right = expression(9);
						}
						break;
					case 3:
						{
						_localctx = new AndOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 177;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 178;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 180;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << GREATER) | (1L << LESS) | (1L << GREATER_EQUAL) | (1L << LESS_EQUAL))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 181;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 183;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_XOR))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 184;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 186;
						_la = TokenStream.LA(1);
						if ( !(_la==BITWISE_SHIFT_LEFT || _la==BITWISE_SHIFT_RIGHT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 187;
						expression(4);
						}
						break;
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MovieScriptDefaultGrammarParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 34, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MovieScriptDefaultGrammarParser.INT, 0); }
		public IntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIntType(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeContext intType() {
		IntTypeContext _localctx = new IntTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_intType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MovieScriptDefaultGrammarParser.FLOAT, 0); }
		public FloatTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFloatType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFloatType(this);
		}
	}

	[RuleVersion(0)]
	public FloatTypeContext floatType() {
		FloatTypeContext _localctx = new FloatTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_floatType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 40, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE_OPEN() { return GetTokens(MovieScriptDefaultGrammarParser.SCOPE_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE_CLOSE() { return GetTokens(MovieScriptDefaultGrammarParser.SCOPE_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 42, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__5);
			State = 202;
			expression(0);
			State = 203;
			Match(SCOPE_OPEN);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 204;
				Match(NEWLINE);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210;
			program();
			State = 211;
			Match(SCOPE_CLOSE);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 212;
				Match(T__6);
				State = 213;
				expression(0);
				State = 214;
				Match(SCOPE_OPEN);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 215;
					Match(NEWLINE);
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 221;
				program();
				State = 222;
				Match(SCOPE_CLOSE);
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 229;
				Match(T__7);
				State = 230;
				Match(SCOPE_OPEN);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 231;
					Match(NEWLINE);
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 237;
				program();
				State = 238;
				Match(SCOPE_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(IDENTIFIER_STRING);
			State = 243;
			Match(ROUND_BRACKET_OPEN);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << DOLLAR) | (1L << NOT) | (1L << MINUS) | (1L << ROUND_BRACKET_OPEN) | (1L << INT) | (1L << FLOAT) | (1L << IDENTIFIER_STRING) | (1L << STRING))) != 0)) {
				{
				State = 244;
				methodCallArgs();
				}
			}

			State = 247;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodCallArgs);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 249;
					expression(0);
					}
					break;
				case 2:
					{
					State = 250;
					tupleExpression();
					}
					break;
				}
				State = 253;
				Match(COMMA);
				State = 254;
				methodCallArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 256;
					expression(0);
					}
					break;
				case 2:
					{
					State = 257;
					tupleExpression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(T__8);
			State = 263;
			Match(IDENTIFIER_STRING);
			State = 264;
			Match(ROUND_BRACKET_OPEN);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_STRING) {
				{
				State = 265;
				methodDefArgs();
				}
			}

			State = 268;
			Match(ROUND_BRACKET_CLOSE);
			State = 269;
			Match(SCOPE_OPEN);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 270;
				Match(NEWLINE);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 276;
			program();
			State = 277;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodDefArgs);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(IDENTIFIER_STRING);
				State = 280;
				Match(COMMA);
				State = 281;
				methodDefArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(IDENTIFIER_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 52, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__9);
			State = 286;
			Match(ROUND_BRACKET_OPEN);
			State = 287;
			expression(0);
			State = 288;
			Match(ROUND_BRACKET_CLOSE);
			State = 289;
			Match(SCOPE_OPEN);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 290;
				Match(NEWLINE);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 296;
			program();
			State = 297;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x12E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x41', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x44', '\v', '\x3', '\a', '\x3', '\x46', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'I', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'N', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x63', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', 'n', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x7F', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x82', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x88', '\n', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x8D', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x92', '\n', 
		'\x11', '\x6', '\x11', '\x94', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 
		'\x95', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xA9', '\n', '\x12', 
		'\x5', '\x12', '\xAB', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xBF', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xC2', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xD0', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xD3', '\v', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\a', '\x17', '\xDB', '\n', '\x17', '\f', '\x17', '\xE', '\x17', 
		'\xDE', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\xE3', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xE6', '\v', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xEB', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xEE', '\v', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF3', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xF8', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\xFE', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x105', '\n', '\x19', '\x5', 
		'\x19', '\x107', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x10D', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x112', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x115', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x11E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x126', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x129', '\v', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x2', '\x3', '\"', '\x1D', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\n', '\x3', '\x2', '\x14', 
		'\x19', '\x3', '\x2', '*', ',', '\x3', '\x2', '(', ')', '\x3', '\x2', 
		'\x1A', '\x1B', '\x4', '\x2', '\x1C', '\x1D', '\x1F', '\"', '\x3', '\x2', 
		'#', '%', '\x3', '\x2', '&', '\'', '\x3', '\x2', '\x6', '\a', '\x2', '\x144', 
		'\x2', '\x38', '\x3', '\x2', '\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'M', '\x3', '\x2', '\x2', '\x2', '\b', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Z', '\x3', '\x2', '\x2', '\x2', '\f', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x62', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'h', '\x3', '\x2', '\x2', '\x2', '\x16', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'o', '\x3', '\x2', '\x2', '\x2', '\x1A', 'r', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'v', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'z', '\x3', '\x2', '\x2', '\x2', ' ', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\xAA', '\x3', '\x2', '\x2', '\x2', '$', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xC5', '\x3', '\x2', '\x2', '\x2', '(', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xC9', '\x3', '\x2', '\x2', '\x2', ',', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x32', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x4', '\x3', '\x2', '\x39', 
		':', '\a', '\x2', '\x2', '\x3', ':', '\x3', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x5', '\xE', '\b', '\x2', '<', '=', '\x5', '\x6', '\x4', '\x2', 
		'=', '\x46', '\x3', '\x2', '\x2', '\x2', '>', '\x42', '\x5', '\b', '\x5', 
		'\x2', '?', '\x41', '\a', '\x11', '\x2', '\x2', '@', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', ';', '\x3', '\x2', '\x2', '\x2', '\x45', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'J', 'N', '\a', '\x10', '\x2', '\x2', 'K', 'N', '\a', '\x11', '\x2', '\x2', 
		'L', 'N', '\x5', '\x10', '\t', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', '\a', '\x3', '\x2', '\x2', '\x2', 'O', 'Y', '\x5', '\x10', '\t', 
		'\x2', 'P', 'Y', '\x5', ',', '\x17', '\x2', 'Q', 'Y', '\x5', '\x32', '\x1A', 
		'\x2', 'R', 'Y', '\x5', '\n', '\x6', '\x2', 'S', 'Y', '\x5', '\f', '\a', 
		'\x2', 'T', 'Y', '\x5', '\x36', '\x1C', '\x2', 'U', 'Y', '\x5', '\x12', 
		'\n', '\x2', 'V', 'Y', '\x5', '\x14', '\v', '\x2', 'W', 'Y', '\x5', '\x16', 
		'\f', '\x2', 'X', 'O', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Q', '\x3', '\x2', '\x2', '\x2', 'X', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 'X', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\a', '-', '\x2', '\x2', '[', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '.', '\x2', '\x2', ']', '\r', '\x3', 
		'\x2', '\x2', '\x2', '^', '\x63', '\x5', '\x1A', '\xE', '\x2', '_', '\x63', 
		'\x5', '\x1C', '\xF', '\x2', '`', '\x63', '\x5', '\x1E', '\x10', '\x2', 
		'\x61', '\x63', '\x5', '.', '\x18', '\x2', '\x62', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x12', '\x2', 
		'\x2', '\x65', '\x11', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', 
		'\x3', '\x2', '\x2', 'g', '\x13', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\a', '\x4', '\x2', '\x2', 'i', '\x15', '\x3', '\x2', '\x2', '\x2', 'j', 
		'm', '\a', '\x5', '\x2', '\x2', 'k', 'n', '\x5', '\"', '\x12', '\x2', 
		'l', 'n', '\x5', ' ', '\x11', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'l', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x17', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x13', '\x2', 
		'\x2', 'p', 'q', '\a', '\x33', '\x2', '\x2', 'q', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x5', '\x18', '\r', '\x2', 's', 't', '\t', '\x2', 
		'\x2', '\x2', 't', 'u', '\x5', '\"', '\x12', '\x2', 'u', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x5', '\x18', '\r', '\x2', 'w', 'x', '\a', 
		'\x14', '\x2', '\x2', 'x', 'y', '\x5', ' ', '\x11', '\x2', 'y', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '/', '\x2', '\x2', '{', '\x80', 
		'\x5', '\x18', '\r', '\x2', '|', '}', '\a', '\x35', '\x2', '\x2', '}', 
		'\x7F', '\x5', '\x18', '\r', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\x30', '\x2', '\x2', '\x84', '\x87', '\t', '\x2', 
		'\x2', '\x2', '\x85', '\x88', '\x5', ' ', '\x11', '\x2', '\x86', '\x88', 
		'\x5', '.', '\x18', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8C', '\a', '/', '\x2', '\x2', '\x8A', '\x8D', 
		'\x5', '\"', '\x12', '\x2', '\x8B', '\x8D', '\x5', ' ', '\x11', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x93', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', 
		'\a', '\x35', '\x2', '\x2', '\x8F', '\x92', '\x5', '\"', '\x12', '\x2', 
		'\x90', '\x92', '\x5', ' ', '\x11', '\x2', '\x91', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x30', '\x2', '\x2', 
		'\x98', '!', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\b', '\x12', 
		'\x1', '\x2', '\x9A', '\x9B', '\a', ')', '\x2', '\x2', '\x9B', '\xAB', 
		'\x5', '\"', '\x12', '\f', '\x9C', '\x9D', '\a', '\x1E', '\x2', '\x2', 
		'\x9D', '\xAB', '\x5', '\"', '\x12', '\t', '\x9E', '\x9F', '\a', '/', 
		'\x2', '\x2', '\x9F', '\xA0', '\x5', '\"', '\x12', '\x2', '\xA0', '\xA1', 
		'\a', '\x30', '\x2', '\x2', '\xA1', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA9', '\x5', '\x18', '\r', '\x2', '\xA3', '\xA9', '\x5', '&', 
		'\x14', '\x2', '\xA4', '\xA9', '\x5', '(', '\x15', '\x2', '\xA5', '\xA9', 
		'\x5', '*', '\x16', '\x2', '\xA6', '\xA9', '\x5', '$', '\x13', '\x2', 
		'\xA7', '\xA9', '\x5', '.', '\x18', '\x2', '\xA8', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\f', '\v', '\x2', '\x2', '\xAD', '\xAE', '\t', '\x3', '\x2', '\x2', '\xAE', 
		'\xBF', '\x5', '\"', '\x12', '\f', '\xAF', '\xB0', '\f', '\n', '\x2', 
		'\x2', '\xB0', '\xB1', '\t', '\x4', '\x2', '\x2', '\xB1', '\xBF', '\x5', 
		'\"', '\x12', '\v', '\xB2', '\xB3', '\f', '\b', '\x2', '\x2', '\xB3', 
		'\xB4', '\t', '\x5', '\x2', '\x2', '\xB4', '\xBF', '\x5', '\"', '\x12', 
		'\t', '\xB5', '\xB6', '\f', '\a', '\x2', '\x2', '\xB6', '\xB7', '\t', 
		'\x6', '\x2', '\x2', '\xB7', '\xBF', '\x5', '\"', '\x12', '\b', '\xB8', 
		'\xB9', '\f', '\x6', '\x2', '\x2', '\xB9', '\xBA', '\t', '\a', '\x2', 
		'\x2', '\xBA', '\xBF', '\x5', '\"', '\x12', '\a', '\xBB', '\xBC', '\f', 
		'\x5', '\x2', '\x2', '\xBC', '\xBD', '\t', '\b', '\x2', '\x2', '\xBD', 
		'\xBF', '\x5', '\"', '\x12', '\x6', '\xBE', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', '\x34', '\x2', '\x2', '\xC4', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x31', '\x2', '\x2', '\xC6', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x32', '\x2', 
		'\x2', '\xC8', ')', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\t', 
		'\t', '\x2', '\x2', '\xCA', '+', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', 
		'\a', '\b', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\"', '\x12', '\x2', 
		'\xCD', '\xD1', '\a', '-', '\x2', '\x2', '\xCE', '\xD0', '\a', '\x11', 
		'\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', 
		'\x5', '\x4', '\x3', '\x2', '\xD5', '\xE4', '\a', '.', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '\t', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\"', '\x12', 
		'\x2', '\xD8', '\xDC', '\a', '-', '\x2', '\x2', '\xD9', '\xDB', '\a', 
		'\x11', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '\x4', '\x3', '\x2', '\xE0', '\xE1', '\a', '.', '\x2', 
		'\x2', '\xE1', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '\n', '\x2', '\x2', '\xE8', 
		'\xEC', '\a', '-', '\x2', '\x2', '\xE9', '\xEB', '\a', '\x11', '\x2', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x5', 
		'\x4', '\x3', '\x2', '\xF0', '\xF1', '\a', '.', '\x2', '\x2', '\xF1', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x33', '\x2', '\x2', '\xF5', 
		'\xF7', '\a', '/', '\x2', '\x2', '\xF6', '\xF8', '\x5', '\x30', '\x19', 
		'\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', '\x30', '\x2', '\x2', '\xFA', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFE', '\x5', '\"', '\x12', '\x2', '\xFC', '\xFE', '\x5', 
		' ', '\x11', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\a', '\x35', '\x2', '\x2', '\x100', '\x101', 
		'\x5', '\x30', '\x19', '\x2', '\x101', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x105', '\x5', '\"', '\x12', '\x2', '\x103', '\x105', '\x5', 
		' ', '\x11', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\a', '\v', '\x2', '\x2', '\x109', '\x10A', '\a', '\x33', 
		'\x2', '\x2', '\x10A', '\x10C', '\a', '/', '\x2', '\x2', '\x10B', '\x10D', 
		'\x5', '\x34', '\x1B', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x30', '\x2', '\x2', '\x10F', 
		'\x113', '\a', '-', '\x2', '\x2', '\x110', '\x112', '\a', '\x11', '\x2', 
		'\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x5', '\x4', '\x3', '\x2', '\x117', '\x118', '\a', '.', '\x2', 
		'\x2', '\x118', '\x33', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\a', '\x33', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x35', '\x2', '\x2', 
		'\x11B', '\x11E', '\x5', '\x34', '\x1B', '\x2', '\x11C', '\x11E', '\a', 
		'\x33', '\x2', '\x2', '\x11D', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\a', '\f', '\x2', '\x2', '\x120', '\x121', '\a', 
		'/', '\x2', '\x2', '\x121', '\x122', '\x5', '\"', '\x12', '\x2', '\x122', 
		'\x123', '\a', '\x30', '\x2', '\x2', '\x123', '\x127', '\a', '-', '\x2', 
		'\x2', '\x124', '\x126', '\a', '\x11', '\x2', '\x2', '\x125', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x4', '\x3', 
		'\x2', '\x12B', '\x12C', '\a', '.', '\x2', '\x2', '\x12C', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x42', '\x45', 'G', 'M', 'X', '\x62', 'm', 
		'\x80', '\x87', '\x8C', '\x91', '\x95', '\xA8', '\xAA', '\xBE', '\xC0', 
		'\xD1', '\xDC', '\xE4', '\xEC', '\xF2', '\xF7', '\xFD', '\x104', '\x106', 
		'\x10C', '\x113', '\x11D', '\x127',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MovieScriptDefaultGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ACTIONSEPARATOR=11, NEWLINE=12, SEMICOLON=13, DOLLAR=14, ASSIGN=15, 
		PLUS_ASSIGN=16, MINUS_ASSIGN=17, MULTIPLY_ASSIGN=18, DIVIDE_ASSIGN=19, 
		MODULO_ASSIGN=20, AND=21, OR=22, EQUAL=23, NOT_EQUAL=24, NOT=25, GREATER=26, 
		LESS=27, GREATER_EQUAL=28, LESS_EQUAL=29, BITWISE_AND=30, BITWISE_OR=31, 
		BITWISE_XOR=32, BITWISE_SHIFT_LEFT=33, BITWISE_SHIFT_RIGHT=34, PLUS=35, 
		MINUS=36, MULTIPLY=37, DIVIDE=38, MODULO=39, SCOPE_OPEN=40, SCOPE_CLOSE=41, 
		ROUND_BRACKET_OPEN=42, ROUND_BRACKET_CLOSE=43, SQUARE_BRACKET_OPEN=44, 
		SQUARE_BRACKET_CLOSE=45, INT=46, FLOAT=47, IDENTIFIER_STRING=48, STRING_LITERAL=49, 
		STRING_CHAR=50, ESCAPE_SEQUENCE=51, COMMA=52, WHITESPACE=53, COMMENT=54, 
		COMMENT_MULTI=55;
	public const int
		RULE_program = 0, RULE_actionSeparator = 1, RULE_action = 2, RULE_actionWithSeparator = 3, 
		RULE_frameAdvance = 4, RULE_breakAction = 5, RULE_continueAction = 6, 
		RULE_returnAction = 7, RULE_variable = 8, RULE_variableAssignment = 9, 
		RULE_variableTupleSeparation = 10, RULE_tupleExpression = 11, RULE_expression = 12, 
		RULE_string = 13, RULE_intType = 14, RULE_floatType = 15, RULE_bool = 16, 
		RULE_ifElse = 17, RULE_methodCall = 18, RULE_methodCallArgs = 19, RULE_methodCallArgsSeparator = 20, 
		RULE_methodDef = 21, RULE_methodName = 22, RULE_methodDefArgs = 23, RULE_methodDefArgsSeparator = 24, 
		RULE_scopeOpen = 25, RULE_scopeClose = 26, RULE_loop = 27, RULE_roundBracketOpen = 28, 
		RULE_roundBracketClose = 29, RULE_squareBracketOpen = 30, RULE_squareBracketClose = 31, 
		RULE_stringIdentifier = 32, RULE_stringChar = 33;
	public static readonly string[] ruleNames = {
		"program", "actionSeparator", "action", "actionWithSeparator", "frameAdvance", 
		"breakAction", "continueAction", "returnAction", "variable", "variableAssignment", 
		"variableTupleSeparation", "tupleExpression", "expression", "string", 
		"intType", "floatType", "bool", "ifElse", "methodCall", "methodCallArgs", 
		"methodCallArgsSeparator", "methodDef", "methodName", "methodDefArgs", 
		"methodDefArgsSeparator", "scopeOpen", "scopeClose", "loop", "roundBracketOpen", 
		"roundBracketClose", "squareBracketOpen", "squareBracketClose", "stringIdentifier", 
		"stringChar"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'continue'", "'return'", "'true'", "'false'", "'if'", 
		"'else if'", "'else'", "'fn'", "'loop'", null, null, "';'", "'$'", "'='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'&&'", "'||'", "'=='", "'!='", 
		"'!'", "'>'", "'<'", "'>='", "'<='", "'&'", null, "'^'", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", "')'", "'['", 
		"']'", null, null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ACTIONSEPARATOR", 
		"NEWLINE", "SEMICOLON", "DOLLAR", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULTIPLY_ASSIGN", "DIVIDE_ASSIGN", "MODULO_ASSIGN", "AND", "OR", "EQUAL", 
		"NOT_EQUAL", "NOT", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
		"BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "BITWISE_SHIFT_LEFT", "BITWISE_SHIFT_RIGHT", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", 
		"ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
		"INT", "FLOAT", "IDENTIFIER_STRING", "STRING_LITERAL", "STRING_CHAR", 
		"ESCAPE_SEQUENCE", "COMMA", "WHITESPACE", "COMMENT", "COMMENT_MULTI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MovieScriptDefaultGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MovieScriptDefaultGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MovieScriptDefaultGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext actionWithSeparator() {
			return GetRuleContext<ActionWithSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext actionSeparator() {
			return GetRuleContext<ActionSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MovieScriptDefaultGrammarParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOLLAR:
				case ROUND_BRACKET_OPEN:
				case IDENTIFIER_STRING:
					{
					State = 68;
					actionWithSeparator();
					State = 69;
					actionSeparator();
					}
					break;
				case T__0:
				case T__1:
				case T__2:
				case T__5:
				case T__8:
				case T__9:
				case SEMICOLON:
				case SCOPE_OPEN:
				case SCOPE_CLOSE:
					{
					State = 71;
					action();
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NEWLINE) {
						{
						{
						State = 72;
						Match(NEWLINE);
						}
						}
						State = 77;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 80;
				program();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOLLAR:
				case ROUND_BRACKET_OPEN:
				case IDENTIFIER_STRING:
					{
					State = 82;
					actionWithSeparator();
					}
					break;
				case T__0:
				case T__1:
				case T__2:
				case T__5:
				case T__8:
				case T__9:
				case SEMICOLON:
				case SCOPE_OPEN:
				case SCOPE_CLOSE:
					{
					State = 83;
					action();
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NEWLINE) {
						{
						{
						State = 84;
						Match(NEWLINE);
						}
						}
						State = 89;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIONSEPARATOR() { return GetToken(MovieScriptDefaultGrammarParser.ACTIONSEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammarParser.SEMICOLON, 0); }
		public ActionSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionSeparatorContext actionSeparator() {
		ActionSeparatorContext _localctx = new ActionSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_actionSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefContext methodDef() {
			return GetRuleContext<MethodDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakActionContext breakAction() {
			return GetRuleContext<BreakActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueActionContext continueAction() {
			return GetRuleContext<ContinueActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnActionContext returnAction() {
			return GetRuleContext<ReturnActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_action);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				frameAdvance();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				ifElse();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				methodDef();
				}
				break;
			case SCOPE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				scopeOpen();
				}
				break;
			case SCOPE_CLOSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				scopeClose();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 102;
				loop();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				breakAction();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				continueAction();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 9);
				{
				State = 105;
				returnAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTupleSeparationContext variableTupleSeparation() {
			return GetRuleContext<VariableTupleSeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ActionWithSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionWithSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionWithSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSeparatorContext actionWithSeparator() {
		ActionWithSeparatorContext _localctx = new ActionWithSeparatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_actionWithSeparator);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				variableAssignment();
				}
				break;
			case ROUND_BRACKET_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				variableTupleSeparation();
				}
				break;
			case IDENTIFIER_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameAdvanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammarParser.SEMICOLON, 0); }
		public FrameAdvanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameAdvance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFrameAdvance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFrameAdvance(this);
		}
	}

	[RuleVersion(0)]
	public FrameAdvanceContext frameAdvance() {
		FrameAdvanceContext _localctx = new FrameAdvanceContext(Context, State);
		EnterRule(_localctx, 8, RULE_frameAdvance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakActionContext : ParserRuleContext {
		public BreakActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBreakAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBreakAction(this);
		}
	}

	[RuleVersion(0)]
	public BreakActionContext breakAction() {
		BreakActionContext _localctx = new BreakActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_breakAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueActionContext : ParserRuleContext {
		public ContinueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterContinueAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitContinueAction(this);
		}
	}

	[RuleVersion(0)]
	public ContinueActionContext continueAction() {
		ContinueActionContext _localctx = new ContinueActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_continueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public ReturnActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterReturnAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitReturnAction(this);
		}
	}

	[RuleVersion(0)]
	public ReturnActionContext returnAction() {
		ReturnActionContext _localctx = new ReturnActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__2);
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 120;
				expression(0);
				}
				break;
			case 2:
				{
				State = 121;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(MovieScriptDefaultGrammarParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(DOLLAR);
			State = 125;
			stringIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			variable();
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2064384L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 129;
				expression(0);
				}
				break;
			case 2:
				{
				State = 130;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTupleSeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public VariableTupleSeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableTupleSeparation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableTupleSeparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableTupleSeparation(this);
		}
	}

	[RuleVersion(0)]
	public VariableTupleSeparationContext variableTupleSeparation() {
		VariableTupleSeparationContext _localctx = new VariableTupleSeparationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableTupleSeparation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			roundBracketOpen();
			State = 134;
			variable();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 135;
				Match(COMMA);
				State = 136;
				variable();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			roundBracketClose();
			State = 143;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2064384L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 144;
				tupleExpression();
				}
				break;
			case IDENTIFIER_STRING:
				{
				State = 145;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_tupleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			roundBracketOpen();
			State = 149;
			expression(0);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 150;
				Match(COMMA);
				State = 151;
				expression(0);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			roundBracketClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MovieScriptDefaultGrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MovieScriptDefaultGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeContext intType() {
			return GetRuleContext<IntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatTypeContext floatType() {
			return GetRuleContext<FloatTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(MovieScriptDefaultGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MovieScriptDefaultGrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MovieScriptDefaultGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MovieScriptDefaultGrammarParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MovieScriptDefaultGrammarParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MovieScriptDefaultGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_LEFT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_RIGHT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_RIGHT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 160;
				roundBracketOpen();
				State = 161;
				expression(0);
				State = 162;
				roundBracketClose();
				}
				break;
			case MINUS:
				{
				State = 164;
				Match(MINUS);
				State = 165;
				expression(12);
				}
				break;
			case NOT:
				{
				State = 166;
				Match(NOT);
				State = 167;
				expression(11);
				}
				break;
			case DOLLAR:
				{
				State = 168;
				variable();
				}
				break;
			case INT:
				{
				State = 169;
				intType();
				}
				break;
			case FLOAT:
				{
				State = 170;
				floatType();
				}
				break;
			case T__3:
			case T__4:
				{
				State = 171;
				@bool();
				}
				break;
			case STRING_LITERAL:
				{
				State = 172;
				@string();
				}
				break;
			case IDENTIFIER_STRING:
				{
				State = 173;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 194;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 177;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 178;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 180;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 181;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 183;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 184;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 186;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1031798784L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 187;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 188;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 189;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 190;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 191;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 192;
						_la = TokenStream.LA(1);
						if ( !(_la==BITWISE_SHIFT_LEFT || _la==BITWISE_SHIFT_RIGHT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 193;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MovieScriptDefaultGrammarParser.STRING_LITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 26, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MovieScriptDefaultGrammarParser.INT, 0); }
		public IntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIntType(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeContext intType() {
		IntTypeContext _localctx = new IntTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_intType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MovieScriptDefaultGrammarParser.FLOAT, 0); }
		public FloatTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFloatType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFloatType(this);
		}
	}

	[RuleVersion(0)]
	public FloatTypeContext floatType() {
		FloatTypeContext _localctx = new FloatTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_floatType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 32, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext[] scopeOpen() {
			return GetRuleContexts<ScopeOpenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen(int i) {
			return GetRuleContext<ScopeOpenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext[] scopeClose() {
			return GetRuleContexts<ScopeCloseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose(int i) {
			return GetRuleContext<ScopeCloseContext>(i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__5);
			State = 208;
			expression(0);
			State = 209;
			scopeOpen();
			State = 210;
			program();
			State = 211;
			scopeClose();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 212;
				Match(T__6);
				State = 213;
				expression(0);
				State = 214;
				scopeOpen();
				State = 215;
				program();
				State = 216;
				scopeClose();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 223;
				Match(T__7);
				State = 224;
				scopeOpen();
				State = 225;
				program();
				State = 226;
				scopeClose();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			methodName();
			State = 231;
			roundBracketOpen();
			State = 232;
			methodCallArgs();
			State = 233;
			roundBracketClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsSeparatorContext methodCallArgsSeparator() {
			return GetRuleContext<MethodCallArgsSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 38, RULE_methodCallArgs);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				expression(0);
				State = 236;
				methodCallArgsSeparator();
				State = 237;
				methodCallArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		public MethodCallArgsSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgsSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCallArgsSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCallArgsSeparator(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsSeparatorContext methodCallArgsSeparator() {
		MethodCallArgsSeparatorContext _localctx = new MethodCallArgsSeparatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodCallArgsSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__8);
			State = 245;
			methodName();
			State = 246;
			roundBracketOpen();
			State = 247;
			methodDefArgs();
			State = 248;
			roundBracketClose();
			State = 249;
			scopeOpen();
			State = 250;
			program();
			State = 251;
			scopeClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			stringIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringIdentifierContext stringIdentifier() {
			return GetRuleContext<StringIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsSeparatorContext methodDefArgsSeparator() {
			return GetRuleContext<MethodDefArgsSeparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodDefArgs);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				stringIdentifier();
				State = 256;
				methodDefArgsSeparator();
				State = 257;
				methodDefArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				stringIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		public MethodDefArgsSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgsSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefArgsSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefArgsSeparator(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsSeparatorContext methodDefArgsSeparator() {
		MethodDefArgsSeparatorContext _localctx = new MethodDefArgsSeparatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDefArgsSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		public ScopeOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeOpen(this);
		}
	}

	[RuleVersion(0)]
	public ScopeOpenContext scopeOpen() {
		ScopeOpenContext _localctx = new ScopeOpenContext(Context, State);
		EnterRule(_localctx, 50, RULE_scopeOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(SCOPE_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		public ScopeCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeClose(this);
		}
	}

	[RuleVersion(0)]
	public ScopeCloseContext scopeClose() {
		ScopeCloseContext _localctx = new ScopeCloseContext(Context, State);
		EnterRule(_localctx, 52, RULE_scopeClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketOpenContext roundBracketOpen() {
			return GetRuleContext<RoundBracketOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoundBracketCloseContext roundBracketClose() {
			return GetRuleContext<RoundBracketCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__9);
			State = 269;
			roundBracketOpen();
			State = 270;
			expression(0);
			State = 271;
			roundBracketClose();
			State = 272;
			scopeOpen();
			State = 273;
			program();
			State = 274;
			scopeClose();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundBracketOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		public RoundBracketOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundBracketOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterRoundBracketOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitRoundBracketOpen(this);
		}
	}

	[RuleVersion(0)]
	public RoundBracketOpenContext roundBracketOpen() {
		RoundBracketOpenContext _localctx = new RoundBracketOpenContext(Context, State);
		EnterRule(_localctx, 56, RULE_roundBracketOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(ROUND_BRACKET_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoundBracketCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		public RoundBracketCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roundBracketClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterRoundBracketClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitRoundBracketClose(this);
		}
	}

	[RuleVersion(0)]
	public RoundBracketCloseContext roundBracketClose() {
		RoundBracketCloseContext _localctx = new RoundBracketCloseContext(Context, State);
		EnterRule(_localctx, 58, RULE_roundBracketClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareBracketOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SQUARE_BRACKET_OPEN, 0); }
		public SquareBracketOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareBracketOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterSquareBracketOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitSquareBracketOpen(this);
		}
	}

	[RuleVersion(0)]
	public SquareBracketOpenContext squareBracketOpen() {
		SquareBracketOpenContext _localctx = new SquareBracketOpenContext(Context, State);
		EnterRule(_localctx, 60, RULE_squareBracketOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(SQUARE_BRACKET_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareBracketCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SQUARE_BRACKET_CLOSE, 0); }
		public SquareBracketCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareBracketClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterSquareBracketClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitSquareBracketClose(this);
		}
	}

	[RuleVersion(0)]
	public SquareBracketCloseContext squareBracketClose() {
		SquareBracketCloseContext _localctx = new SquareBracketCloseContext(Context, State);
		EnterRule(_localctx, 62, RULE_squareBracketClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(SQUARE_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		public StringIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterStringIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitStringIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public StringIdentifierContext stringIdentifier() {
		StringIdentifierContext _localctx = new StringIdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_stringIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(IDENTIFIER_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHAR() { return GetToken(MovieScriptDefaultGrammarParser.STRING_CHAR, 0); }
		public StringCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterStringChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitStringChar(this);
		}
	}

	[RuleVersion(0)]
	public StringCharContext stringChar() {
		StringCharContext _localctx = new StringCharContext(Context, State);
		EnterRule(_localctx, 66, RULE_stringChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(STRING_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,289,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,
		5,0,74,8,0,10,0,12,0,77,9,0,3,0,79,8,0,1,0,1,0,1,0,1,0,1,0,5,0,86,8,0,
		10,0,12,0,89,9,0,3,0,91,8,0,1,0,3,0,94,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,107,8,2,1,3,1,3,1,3,3,3,112,8,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,3,7,123,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,132,8,9,
		1,10,1,10,1,10,1,10,5,10,138,8,10,10,10,12,10,141,9,10,1,10,1,10,1,10,
		1,10,3,10,147,8,10,1,11,1,11,1,11,1,11,5,11,153,8,11,10,11,12,11,156,9,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,3,12,175,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,195,8,12,10,12,
		12,12,198,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,219,8,17,10,17,12,17,222,
		9,17,1,17,1,17,1,17,1,17,1,17,3,17,229,8,17,1,18,1,18,1,18,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,3,19,241,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,261,8,23,1,
		24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,0,1,24,
		34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,0,9,1,0,11,13,1,0,15,20,1,0,37,39,1,0,35,
		36,1,0,21,22,2,0,23,24,26,29,1,0,30,32,1,0,33,34,1,0,4,5,294,0,93,1,0,
		0,0,2,95,1,0,0,0,4,106,1,0,0,0,6,111,1,0,0,0,8,113,1,0,0,0,10,115,1,0,
		0,0,12,117,1,0,0,0,14,119,1,0,0,0,16,124,1,0,0,0,18,127,1,0,0,0,20,133,
		1,0,0,0,22,148,1,0,0,0,24,174,1,0,0,0,26,199,1,0,0,0,28,201,1,0,0,0,30,
		203,1,0,0,0,32,205,1,0,0,0,34,207,1,0,0,0,36,230,1,0,0,0,38,240,1,0,0,
		0,40,242,1,0,0,0,42,244,1,0,0,0,44,253,1,0,0,0,46,260,1,0,0,0,48,262,1,
		0,0,0,50,264,1,0,0,0,52,266,1,0,0,0,54,268,1,0,0,0,56,276,1,0,0,0,58,278,
		1,0,0,0,60,280,1,0,0,0,62,282,1,0,0,0,64,284,1,0,0,0,66,286,1,0,0,0,68,
		69,3,6,3,0,69,70,3,2,1,0,70,79,1,0,0,0,71,75,3,4,2,0,72,74,5,12,0,0,73,
		72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,79,1,0,0,0,77,
		75,1,0,0,0,78,68,1,0,0,0,78,71,1,0,0,0,79,80,1,0,0,0,80,81,3,0,0,0,81,
		94,1,0,0,0,82,91,3,6,3,0,83,87,3,4,2,0,84,86,5,12,0,0,85,84,1,0,0,0,86,
		89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,90,
		82,1,0,0,0,90,83,1,0,0,0,91,94,1,0,0,0,92,94,5,0,0,1,93,78,1,0,0,0,93,
		90,1,0,0,0,93,92,1,0,0,0,94,1,1,0,0,0,95,96,7,0,0,0,96,3,1,0,0,0,97,107,
		3,8,4,0,98,107,3,34,17,0,99,107,3,42,21,0,100,107,3,50,25,0,101,107,3,
		52,26,0,102,107,3,54,27,0,103,107,3,10,5,0,104,107,3,12,6,0,105,107,3,
		14,7,0,106,97,1,0,0,0,106,98,1,0,0,0,106,99,1,0,0,0,106,100,1,0,0,0,106,
		101,1,0,0,0,106,102,1,0,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,105,1,
		0,0,0,107,5,1,0,0,0,108,112,3,18,9,0,109,112,3,20,10,0,110,112,3,36,18,
		0,111,108,1,0,0,0,111,109,1,0,0,0,111,110,1,0,0,0,112,7,1,0,0,0,113,114,
		5,13,0,0,114,9,1,0,0,0,115,116,5,1,0,0,116,11,1,0,0,0,117,118,5,2,0,0,
		118,13,1,0,0,0,119,122,5,3,0,0,120,123,3,24,12,0,121,123,3,22,11,0,122,
		120,1,0,0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,15,1,0,0,0,124,125,5,14,
		0,0,125,126,3,64,32,0,126,17,1,0,0,0,127,128,3,16,8,0,128,131,7,1,0,0,
		129,132,3,24,12,0,130,132,3,22,11,0,131,129,1,0,0,0,131,130,1,0,0,0,132,
		19,1,0,0,0,133,134,3,56,28,0,134,139,3,16,8,0,135,136,5,52,0,0,136,138,
		3,16,8,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,
		0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,3,58,29,0,143,146,7,1,0,0,144,
		147,3,22,11,0,145,147,3,36,18,0,146,144,1,0,0,0,146,145,1,0,0,0,147,21,
		1,0,0,0,148,149,3,56,28,0,149,154,3,24,12,0,150,151,5,52,0,0,151,153,3,
		24,12,0,152,150,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,
		0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,3,58,29,0,158,23,1,0,0,0,159,
		160,6,12,-1,0,160,161,3,56,28,0,161,162,3,24,12,0,162,163,3,58,29,0,163,
		175,1,0,0,0,164,165,5,36,0,0,165,175,3,24,12,12,166,167,5,25,0,0,167,175,
		3,24,12,11,168,175,3,16,8,0,169,175,3,28,14,0,170,175,3,30,15,0,171,175,
		3,32,16,0,172,175,3,26,13,0,173,175,3,36,18,0,174,159,1,0,0,0,174,164,
		1,0,0,0,174,166,1,0,0,0,174,168,1,0,0,0,174,169,1,0,0,0,174,170,1,0,0,
		0,174,171,1,0,0,0,174,172,1,0,0,0,174,173,1,0,0,0,175,196,1,0,0,0,176,
		177,10,14,0,0,177,178,7,2,0,0,178,195,3,24,12,15,179,180,10,13,0,0,180,
		181,7,3,0,0,181,195,3,24,12,14,182,183,10,10,0,0,183,184,7,4,0,0,184,195,
		3,24,12,11,185,186,10,9,0,0,186,187,7,5,0,0,187,195,3,24,12,10,188,189,
		10,8,0,0,189,190,7,6,0,0,190,195,3,24,12,9,191,192,10,7,0,0,192,193,7,
		7,0,0,193,195,3,24,12,8,194,176,1,0,0,0,194,179,1,0,0,0,194,182,1,0,0,
		0,194,185,1,0,0,0,194,188,1,0,0,0,194,191,1,0,0,0,195,198,1,0,0,0,196,
		194,1,0,0,0,196,197,1,0,0,0,197,25,1,0,0,0,198,196,1,0,0,0,199,200,5,49,
		0,0,200,27,1,0,0,0,201,202,5,46,0,0,202,29,1,0,0,0,203,204,5,47,0,0,204,
		31,1,0,0,0,205,206,7,8,0,0,206,33,1,0,0,0,207,208,5,6,0,0,208,209,3,24,
		12,0,209,210,3,50,25,0,210,211,3,0,0,0,211,220,3,52,26,0,212,213,5,7,0,
		0,213,214,3,24,12,0,214,215,3,50,25,0,215,216,3,0,0,0,216,217,3,52,26,
		0,217,219,1,0,0,0,218,212,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,
		221,1,0,0,0,221,228,1,0,0,0,222,220,1,0,0,0,223,224,5,8,0,0,224,225,3,
		50,25,0,225,226,3,0,0,0,226,227,3,52,26,0,227,229,1,0,0,0,228,223,1,0,
		0,0,228,229,1,0,0,0,229,35,1,0,0,0,230,231,3,44,22,0,231,232,3,56,28,0,
		232,233,3,38,19,0,233,234,3,58,29,0,234,37,1,0,0,0,235,236,3,24,12,0,236,
		237,3,40,20,0,237,238,3,38,19,0,238,241,1,0,0,0,239,241,3,24,12,0,240,
		235,1,0,0,0,240,239,1,0,0,0,241,39,1,0,0,0,242,243,5,52,0,0,243,41,1,0,
		0,0,244,245,5,9,0,0,245,246,3,44,22,0,246,247,3,56,28,0,247,248,3,46,23,
		0,248,249,3,58,29,0,249,250,3,50,25,0,250,251,3,0,0,0,251,252,3,52,26,
		0,252,43,1,0,0,0,253,254,3,64,32,0,254,45,1,0,0,0,255,256,3,64,32,0,256,
		257,3,48,24,0,257,258,3,46,23,0,258,261,1,0,0,0,259,261,3,64,32,0,260,
		255,1,0,0,0,260,259,1,0,0,0,261,47,1,0,0,0,262,263,5,52,0,0,263,49,1,0,
		0,0,264,265,5,40,0,0,265,51,1,0,0,0,266,267,5,41,0,0,267,53,1,0,0,0,268,
		269,5,10,0,0,269,270,3,56,28,0,270,271,3,24,12,0,271,272,3,58,29,0,272,
		273,3,50,25,0,273,274,3,0,0,0,274,275,3,52,26,0,275,55,1,0,0,0,276,277,
		5,42,0,0,277,57,1,0,0,0,278,279,5,43,0,0,279,59,1,0,0,0,280,281,5,44,0,
		0,281,61,1,0,0,0,282,283,5,45,0,0,283,63,1,0,0,0,284,285,5,48,0,0,285,
		65,1,0,0,0,286,287,5,50,0,0,287,67,1,0,0,0,19,75,78,87,90,93,106,111,122,
		131,139,146,154,174,194,196,220,228,240,260
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

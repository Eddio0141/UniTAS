//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MovieScriptDefaultGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class MovieScriptDefaultGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, WHITESPACE=11, COMMENT=12, COMMENT_MULTI=13, ACTIONSEPARATOR=14, 
		NEWLINE=15, SEMICOLON=16, DOLLAR=17, ASSIGN=18, PLUS_ASSIGN=19, MINUS_ASSIGN=20, 
		MULTIPLY_ASSIGN=21, DIVIDE_ASSIGN=22, MODULO_ASSIGN=23, AND=24, OR=25, 
		EQUAL=26, NOT_EQUAL=27, NOT=28, GREATER=29, LESS=30, GREATER_EQUAL=31, 
		LESS_EQUAL=32, BITWISE_AND=33, BITWISE_OR=34, BITWISE_XOR=35, BITWISE_SHIFT_LEFT=36, 
		BITWISE_SHIFT_RIGHT=37, PLUS=38, MINUS=39, MULTIPLY=40, DIVIDE=41, MODULO=42, 
		SCOPE_OPEN=43, SCOPE_CLOSE=44, ROUND_BRACKET_OPEN=45, ROUND_BRACKET_CLOSE=46, 
		INT=47, FLOAT=48, IDENTIFIER_STRING=49, STRING=50, COMMA=51;
	public const int
		RULE_program = 0, RULE_actionSeparator = 1, RULE_action = 2, RULE_scopeOpen = 3, 
		RULE_scopeClose = 4, RULE_actionWithSeparator = 5, RULE_frameAdvance = 6, 
		RULE_breakAction = 7, RULE_continueAction = 8, RULE_returnAction = 9, 
		RULE_variable = 10, RULE_variableAssignment = 11, RULE_variableTupleSeparation = 12, 
		RULE_tupleExpression = 13, RULE_expression = 14, RULE_expressionTerminator = 15, 
		RULE_string = 16, RULE_intType = 17, RULE_floatType = 18, RULE_bool = 19, 
		RULE_ifElse = 20, RULE_methodCall = 21, RULE_methodCallArgs = 22, RULE_methodDef = 23, 
		RULE_methodDefArgs = 24, RULE_loop = 25;
	public static readonly string[] ruleNames = {
		"program", "actionSeparator", "action", "scopeOpen", "scopeClose", "actionWithSeparator", 
		"frameAdvance", "breakAction", "continueAction", "returnAction", "variable", 
		"variableAssignment", "variableTupleSeparation", "tupleExpression", "expression", 
		"expressionTerminator", "string", "intType", "floatType", "bool", "ifElse", 
		"methodCall", "methodCallArgs", "methodDef", "methodDefArgs", "loop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'continue'", "'return'", "'true'", "'false'", "'if'", 
		"'else if'", "'else'", "'fn'", "'loop'", null, null, null, null, null, 
		"';'", "'$'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&&'", "'||'", 
		"'=='", "'!='", "'!'", "'>'", "'<'", "'>='", "'<='", "'&'", null, "'^'", 
		"'<<'", "'>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", 
		"')'", null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "WHITESPACE", 
		"COMMENT", "COMMENT_MULTI", "ACTIONSEPARATOR", "NEWLINE", "SEMICOLON", 
		"DOLLAR", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULTIPLY_ASSIGN", 
		"DIVIDE_ASSIGN", "MODULO_ASSIGN", "AND", "OR", "EQUAL", "NOT_EQUAL", "NOT", 
		"GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", "BITWISE_AND", "BITWISE_OR", 
		"BITWISE_XOR", "BITWISE_SHIFT_LEFT", "BITWISE_SHIFT_RIGHT", "PLUS", "MINUS", 
		"MULTIPLY", "DIVIDE", "MODULO", "SCOPE_OPEN", "SCOPE_CLOSE", "ROUND_BRACKET_OPEN", 
		"ROUND_BRACKET_CLOSE", "INT", "FLOAT", "IDENTIFIER_STRING", "STRING", 
		"COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MovieScriptDefaultGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MovieScriptDefaultGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MovieScriptDefaultGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MovieScriptDefaultGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext[] actionWithSeparator() {
			return GetRuleContexts<ActionWithSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSeparatorContext actionWithSeparator(int i) {
			return GetRuleContext<ActionWithSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext[] actionSeparator() {
			return GetRuleContexts<ActionSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionSeparatorContext actionSeparator(int i) {
			return GetRuleContext<ActionSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOLLAR:
					case ROUND_BRACKET_OPEN:
					case IDENTIFIER_STRING:
						{
						State = 52;
						actionWithSeparator();
						State = 53;
						actionSeparator();
						}
						break;
					case T__0:
					case T__1:
					case T__2:
					case T__5:
					case T__8:
					case T__9:
					case SEMICOLON:
					case SCOPE_OPEN:
					case SCOPE_CLOSE:
						{
						State = 55;
						action();
						State = 59;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 56;
							Match(NEWLINE);
							}
							}
							State = 61;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIONSEPARATOR() { return GetToken(MovieScriptDefaultGrammarParser.ACTIONSEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		public ActionSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionSeparatorContext actionSeparator() {
		ActionSeparatorContext _localctx = new ActionSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_actionSeparator);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACTIONSEPARATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				Match(ACTIONSEPARATOR);
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(NEWLINE);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				frameAdvance();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameAdvanceContext frameAdvance() {
			return GetRuleContext<FrameAdvanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse() {
			return GetRuleContext<IfElseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefContext methodDef() {
			return GetRuleContext<MethodDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeOpenContext scopeOpen() {
			return GetRuleContext<ScopeOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeCloseContext scopeClose() {
			return GetRuleContext<ScopeCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakActionContext breakAction() {
			return GetRuleContext<BreakActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueActionContext continueAction() {
			return GetRuleContext<ContinueActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnActionContext returnAction() {
			return GetRuleContext<ReturnActionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 4, RULE_action);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				frameAdvance();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				ifElse();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				methodDef();
				}
				break;
			case SCOPE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				scopeOpen();
				}
				break;
			case SCOPE_CLOSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				scopeClose();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				loop();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 7);
				{
				State = 78;
				breakAction();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 8);
				{
				State = 79;
				continueAction();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 9);
				{
				State = 80;
				returnAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		public ScopeOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeOpen(this);
		}
	}

	[RuleVersion(0)]
	public ScopeOpenContext scopeOpen() {
		ScopeOpenContext _localctx = new ScopeOpenContext(Context, State);
		EnterRule(_localctx, 6, RULE_scopeOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(SCOPE_OPEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		public ScopeCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopeClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterScopeClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitScopeClose(this);
		}
	}

	[RuleVersion(0)]
	public ScopeCloseContext scopeClose() {
		ScopeCloseContext _localctx = new ScopeCloseContext(Context, State);
		EnterRule(_localctx, 8, RULE_scopeClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTupleSeparationContext variableTupleSeparation() {
			return GetRuleContext<VariableTupleSeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ActionWithSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterActionWithSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitActionWithSeparator(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSeparatorContext actionWithSeparator() {
		ActionWithSeparatorContext _localctx = new ActionWithSeparatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_actionWithSeparator);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				variableAssignment();
				}
				break;
			case ROUND_BRACKET_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				variableTupleSeparation();
				}
				break;
			case IDENTIFIER_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameAdvanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MovieScriptDefaultGrammarParser.SEMICOLON, 0); }
		public FrameAdvanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameAdvance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFrameAdvance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFrameAdvance(this);
		}
	}

	[RuleVersion(0)]
	public FrameAdvanceContext frameAdvance() {
		FrameAdvanceContext _localctx = new FrameAdvanceContext(Context, State);
		EnterRule(_localctx, 12, RULE_frameAdvance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakActionContext : ParserRuleContext {
		public BreakActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBreakAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBreakAction(this);
		}
	}

	[RuleVersion(0)]
	public BreakActionContext breakAction() {
		BreakActionContext _localctx = new BreakActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_breakAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueActionContext : ParserRuleContext {
		public ContinueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterContinueAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitContinueAction(this);
		}
	}

	[RuleVersion(0)]
	public ContinueActionContext continueAction() {
		ContinueActionContext _localctx = new ContinueActionContext(Context, State);
		EnterRule(_localctx, 16, RULE_continueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public ReturnActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterReturnAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitReturnAction(this);
		}
	}

	[RuleVersion(0)]
	public ReturnActionContext returnAction() {
		ReturnActionContext _localctx = new ReturnActionContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__2);
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 99;
				expression(0);
				}
				break;
			case 2:
				{
				State = 100;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(MovieScriptDefaultGrammarParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(DOLLAR);
			State = 104;
			Match(IDENTIFIER_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			variable();
			State = 107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MULTIPLY_ASSIGN) | (1L << DIVIDE_ASSIGN) | (1L << MODULO_ASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 108;
				expression(0);
				}
				break;
			case 2:
				{
				State = 109;
				tupleExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTupleSeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_ASSIGN() { return GetToken(MovieScriptDefaultGrammarParser.MODULO_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public VariableTupleSeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableTupleSeparation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterVariableTupleSeparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitVariableTupleSeparation(this);
		}
	}

	[RuleVersion(0)]
	public VariableTupleSeparationContext variableTupleSeparation() {
		VariableTupleSeparationContext _localctx = new VariableTupleSeparationContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableTupleSeparation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(ROUND_BRACKET_OPEN);
			State = 113;
			variable();
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 114;
				Match(COMMA);
				State = 115;
				variable();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			Match(ROUND_BRACKET_CLOSE);
			State = 122;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUS_ASSIGN) | (1L << MINUS_ASSIGN) | (1L << MULTIPLY_ASSIGN) | (1L << DIVIDE_ASSIGN) | (1L << MODULO_ASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 123;
				tupleExpression();
				}
				break;
			case IDENTIFIER_STRING:
				{
				State = 124;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext[] tupleExpression() {
			return GetRuleContexts<TupleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression(int i) {
			return GetRuleContext<TupleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MovieScriptDefaultGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.COMMA, i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_tupleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(ROUND_BRACKET_OPEN);
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 128;
				expression(0);
				}
				break;
			case 2:
				{
				State = 129;
				tupleExpression();
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 132;
				Match(COMMA);
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 133;
					expression(0);
					}
					break;
				case 2:
					{
					State = 134;
					tupleExpression();
					}
					break;
				}
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 141;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken setNegative;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MovieScriptDefaultGrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MovieScriptDefaultGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionTerminatorContext expressionTerminator() {
			return GetRuleContext<ExpressionTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(MovieScriptDefaultGrammarParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MovieScriptDefaultGrammarParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(MovieScriptDefaultGrammarParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MovieScriptDefaultGrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MovieScriptDefaultGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MovieScriptDefaultGrammarParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MovieScriptDefaultGrammarParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(MovieScriptDefaultGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(MovieScriptDefaultGrammarParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_LEFT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_SHIFT_RIGHT() { return GetToken(MovieScriptDefaultGrammarParser.BITWISE_SHIFT_RIGHT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROUND_BRACKET_OPEN:
				{
				State = 144;
				Match(ROUND_BRACKET_OPEN);
				State = 145;
				expression(0);
				State = 146;
				Match(ROUND_BRACKET_CLOSE);
				}
				break;
			case MINUS:
				{
				State = 148;
				_localctx.setNegative = Match(MINUS);
				State = 149;
				expression(7);
				}
				break;
			case NOT:
				{
				State = 150;
				Match(NOT);
				State = 151;
				expression(6);
				}
				break;
			case T__3:
			case T__4:
			case DOLLAR:
			case INT:
			case FLOAT:
			case IDENTIFIER_STRING:
			case STRING:
				{
				State = 152;
				expressionTerminator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 173;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 156;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << MODULO))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 157;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 159;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 161;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 162;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 165;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << GREATER) | (1L << LESS) | (1L << GREATER_EQUAL) | (1L << LESS_EQUAL))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 166;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 168;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BITWISE_AND) | (1L << BITWISE_OR) | (1L << BITWISE_XOR))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 169;
						expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 171;
						_la = TokenStream.LA(1);
						if ( !(_la==BITWISE_SHIFT_LEFT || _la==BITWISE_SHIFT_RIGHT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 172;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionTerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntTypeContext intType() {
			return GetRuleContext<IntTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatTypeContext floatType() {
			return GetRuleContext<FloatTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ExpressionTerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionTerminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterExpressionTerminator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitExpressionTerminator(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionTerminatorContext expressionTerminator() {
		ExpressionTerminatorContext _localctx = new ExpressionTerminatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_expressionTerminator);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				variable();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				intType();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				floatType();
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				@bool();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 182;
				@string();
				}
				break;
			case IDENTIFIER_STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 183;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MovieScriptDefaultGrammarParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MovieScriptDefaultGrammarParser.INT, 0); }
		public IntTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIntType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIntType(this);
		}
	}

	[RuleVersion(0)]
	public IntTypeContext intType() {
		IntTypeContext _localctx = new IntTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_intType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MovieScriptDefaultGrammarParser.FLOAT, 0); }
		public FloatTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterFloatType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitFloatType(this);
		}
	}

	[RuleVersion(0)]
	public FloatTypeContext floatType() {
		FloatTypeContext _localctx = new FloatTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_floatType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 38, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE_OPEN() { return GetTokens(MovieScriptDefaultGrammarParser.SCOPE_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE_CLOSE() { return GetTokens(MovieScriptDefaultGrammarParser.SCOPE_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterIfElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitIfElse(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__5);
			State = 195;
			expression(0);
			State = 196;
			Match(SCOPE_OPEN);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 197;
				Match(NEWLINE);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			program();
			State = 204;
			Match(SCOPE_CLOSE);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 205;
				Match(T__6);
				State = 206;
				expression(0);
				State = 207;
				Match(SCOPE_OPEN);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 208;
					Match(NEWLINE);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 214;
				program();
				State = 215;
				Match(SCOPE_CLOSE);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 222;
				Match(T__7);
				State = 223;
				Match(SCOPE_OPEN);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 224;
					Match(NEWLINE);
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 230;
				program();
				State = 231;
				Match(SCOPE_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(IDENTIFIER_STRING);
			State = 236;
			Match(ROUND_BRACKET_OPEN);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << DOLLAR) | (1L << NOT) | (1L << MINUS) | (1L << ROUND_BRACKET_OPEN) | (1L << INT) | (1L << FLOAT) | (1L << IDENTIFIER_STRING) | (1L << STRING))) != 0)) {
				{
				State = 237;
				methodCallArgs();
				}
			}

			State = 240;
			Match(ROUND_BRACKET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallArgsContext methodCallArgs() {
			return GetRuleContext<MethodCallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public MethodCallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodCallArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgsContext methodCallArgs() {
		MethodCallArgsContext _localctx = new MethodCallArgsContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodCallArgs);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 242;
					expression(0);
					}
					break;
				case 2:
					{
					State = 243;
					tupleExpression();
					}
					break;
				}
				State = 246;
				Match(COMMA);
				State = 247;
				methodCallArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 249;
					expression(0);
					}
					break;
				case 2:
					{
					State = 250;
					tupleExpression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDef(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefContext methodDef() {
		MethodDefContext _localctx = new MethodDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(T__8);
			State = 256;
			Match(IDENTIFIER_STRING);
			State = 257;
			Match(ROUND_BRACKET_OPEN);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER_STRING) {
				{
				State = 258;
				methodDefArgs();
				}
			}

			State = 261;
			Match(ROUND_BRACKET_CLOSE);
			State = 262;
			Match(SCOPE_OPEN);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 263;
				Match(NEWLINE);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269;
			program();
			State = 270;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_STRING() { return GetToken(MovieScriptDefaultGrammarParser.IDENTIFIER_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MovieScriptDefaultGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefArgsContext methodDefArgs() {
			return GetRuleContext<MethodDefArgsContext>(0);
		}
		public MethodDefArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterMethodDefArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitMethodDefArgs(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefArgsContext methodDefArgs() {
		MethodDefArgsContext _localctx = new MethodDefArgsContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodDefArgs);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(IDENTIFIER_STRING);
				State = 273;
				Match(COMMA);
				State = 274;
				methodDefArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				Match(IDENTIFIER_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND_BRACKET_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.ROUND_BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(MovieScriptDefaultGrammarParser.SCOPE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MovieScriptDefaultGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MovieScriptDefaultGrammarParser.NEWLINE, i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMovieScriptDefaultGrammarListener typedListener = listener as IMovieScriptDefaultGrammarListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 50, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(T__9);
			State = 279;
			Match(ROUND_BRACKET_OPEN);
			State = 280;
			expression(0);
			State = 281;
			Match(ROUND_BRACKET_CLOSE);
			State = 282;
			Match(SCOPE_OPEN);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 283;
				Match(NEWLINE);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			program();
			State = 290;
			Match(SCOPE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x127', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '?', '\v', '\x2', '\a', '\x2', '\x41', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x44', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'I', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', 'T', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', ']', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 'h', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'q', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'w', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', 'z', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x80', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x85', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x8A', 
		'\n', '\xF', '\x6', '\xF', '\x8C', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\x8D', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x9C', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xB0', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xB3', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xBB', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\xC9', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xCC', '\v', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\xD4', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\xD7', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\xDC', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\xDF', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\xE4', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xE7', '\v', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xEC', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xF1', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xF7', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xFE', '\n', 
		'\x18', '\x5', '\x18', '\x100', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x106', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x10B', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x10E', '\v', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x117', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x11F', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x122', '\v', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x3', 
		'\x1E', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', '\n', '\x3', '\x2', 
		'\x14', '\x19', '\x3', '\x2', '*', ',', '\x3', '\x2', '(', ')', '\x3', 
		'\x2', '\x1A', '\x1B', '\x4', '\x2', '\x1C', '\x1D', '\x1F', '\"', '\x3', 
		'\x2', '#', '%', '\x3', '\x2', '&', '\'', '\x3', '\x2', '\x6', '\a', '\x2', 
		'\x13E', '\x2', '\x42', '\x3', '\x2', '\x2', '\x2', '\x4', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'S', '\x3', '\x2', '\x2', '\x2', '\b', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '`', '\x3', '\x2', '\x2', '\x2', '\x12', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x64', '\x3', '\x2', '\x2', '\x2', '\x16', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x18', 'l', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x9B', '\x3', '\x2', '\x2', '\x2', ' ', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xBC', '\x3', '\x2', '\x2', '\x2', '$', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xC0', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '*', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xED', '\x3', '\x2', '\x2', '\x2', '.', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x101', '\x3', '\x2', '\x2', '\x2', '\x32', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\f', '\a', '\x2', '\x37', '\x38', '\x5', '\x4', 
		'\x3', '\x2', '\x38', '\x41', '\x3', '\x2', '\x2', '\x2', '\x39', '=', 
		'\x5', '\x6', '\x4', '\x2', ':', '<', '\a', '\x11', '\x2', '\x2', ';', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x36', '\x3', '\x2', '\x2', '\x2', '@', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x3', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'I', '\a', '\x10', '\x2', '\x2', '\x46', 'I', '\a', 
		'\x11', '\x2', '\x2', 'G', 'I', '\x5', '\xE', '\b', '\x2', 'H', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'G', '\x3', '\x2', '\x2', '\x2', 'I', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'J', 'T', '\x5', '\xE', '\b', '\x2', 'K', 'T', '\x5', '*', '\x16', '\x2', 
		'L', 'T', '\x5', '\x30', '\x19', '\x2', 'M', 'T', '\x5', '\b', '\x5', 
		'\x2', 'N', 'T', '\x5', '\n', '\x6', '\x2', 'O', 'T', '\x5', '\x34', '\x1B', 
		'\x2', 'P', 'T', '\x5', '\x10', '\t', '\x2', 'Q', 'T', '\x5', '\x12', 
		'\n', '\x2', 'R', 'T', '\x5', '\x14', '\v', '\x2', 'S', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'K', '\x3', '\x2', '\x2', '\x2', 'S', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'M', '\x3', '\x2', '\x2', '\x2', 'S', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'O', '\x3', '\x2', '\x2', '\x2', 'S', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\a', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '-', 
		'\x2', '\x2', 'V', '\t', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '.', 
		'\x2', '\x2', 'X', '\v', '\x3', '\x2', '\x2', '\x2', 'Y', ']', '\x5', 
		'\x18', '\r', '\x2', 'Z', ']', '\x5', '\x1A', '\xE', '\x2', '[', ']', 
		'\x5', ',', '\x17', '\x2', '\\', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '\r', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x12', '\x2', 
		'\x2', '_', '\xF', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\x3', 
		'\x2', '\x2', '\x61', '\x11', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\a', '\x4', '\x2', '\x2', '\x63', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x64', 'g', '\a', '\x5', '\x2', '\x2', '\x65', 'h', '\x5', '\x1E', '\x10', 
		'\x2', '\x66', 'h', '\x5', '\x1C', '\xF', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x15', '\x3', '\x2', '\x2', '\x2', 'i', 'j', 
		'\a', '\x13', '\x2', '\x2', 'j', 'k', '\a', '\x33', '\x2', '\x2', 'k', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', '\x16', '\f', '\x2', 
		'm', 'p', '\t', '\x2', '\x2', '\x2', 'n', 'q', '\x5', '\x1E', '\x10', 
		'\x2', 'o', 'q', '\x5', '\x1C', '\xF', '\x2', 'p', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '/', '\x2', '\x2', 's', 'x', '\x5', 
		'\x16', '\f', '\x2', 't', 'u', '\a', '\x35', '\x2', '\x2', 'u', 'w', '\x5', 
		'\x16', '\f', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x30', '\x2', '\x2', '|', '\x7F', 
		'\t', '\x2', '\x2', '\x2', '}', '\x80', '\x5', '\x1C', '\xF', '\x2', '~', 
		'\x80', '\x5', ',', '\x17', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x84', '\a', '/', '\x2', '\x2', '\x82', '\x85', 
		'\x5', '\x1E', '\x10', '\x2', '\x83', '\x85', '\x5', '\x1C', '\xF', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', 
		'\a', '\x35', '\x2', '\x2', '\x87', '\x8A', '\x5', '\x1E', '\x10', '\x2', 
		'\x88', '\x8A', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x30', '\x2', '\x2', 
		'\x90', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\b', '\x10', 
		'\x1', '\x2', '\x92', '\x93', '\a', '/', '\x2', '\x2', '\x93', '\x94', 
		'\x5', '\x1E', '\x10', '\x2', '\x94', '\x95', '\a', '\x30', '\x2', '\x2', 
		'\x95', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', ')', 
		'\x2', '\x2', '\x97', '\x9C', '\x5', '\x1E', '\x10', '\t', '\x98', '\x99', 
		'\a', '\x1E', '\x2', '\x2', '\x99', '\x9C', '\x5', '\x1E', '\x10', '\b', 
		'\x9A', '\x9C', '\x5', ' ', '\x11', '\x2', '\x9B', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\f', '\v', 
		'\x2', '\x2', '\x9E', '\x9F', '\t', '\x3', '\x2', '\x2', '\x9F', '\xB0', 
		'\x5', '\x1E', '\x10', '\f', '\xA0', '\xA1', '\f', '\n', '\x2', '\x2', 
		'\xA1', '\xA2', '\t', '\x4', '\x2', '\x2', '\xA2', '\xB0', '\x5', '\x1E', 
		'\x10', '\v', '\xA3', '\xA4', '\f', '\a', '\x2', '\x2', '\xA4', '\xA5', 
		'\t', '\x5', '\x2', '\x2', '\xA5', '\xB0', '\x5', '\x1E', '\x10', '\b', 
		'\xA6', '\xA7', '\f', '\x6', '\x2', '\x2', '\xA7', '\xA8', '\t', '\x6', 
		'\x2', '\x2', '\xA8', '\xB0', '\x5', '\x1E', '\x10', '\a', '\xA9', '\xAA', 
		'\f', '\x5', '\x2', '\x2', '\xAA', '\xAB', '\t', '\a', '\x2', '\x2', '\xAB', 
		'\xB0', '\x5', '\x1E', '\x10', '\x6', '\xAC', '\xAD', '\f', '\x4', '\x2', 
		'\x2', '\xAD', '\xAE', '\t', '\b', '\x2', '\x2', '\xAE', '\xB0', '\x5', 
		'\x1E', '\x10', '\x5', '\xAF', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xBB', '\x5', '\x16', '\f', '\x2', '\xB5', '\xBB', '\x5', '$', '\x13', 
		'\x2', '\xB6', '\xBB', '\x5', '&', '\x14', '\x2', '\xB7', '\xBB', '\x5', 
		'(', '\x15', '\x2', '\xB8', '\xBB', '\x5', '\"', '\x12', '\x2', '\xB9', 
		'\xBB', '\x5', ',', '\x17', '\x2', '\xBA', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '!', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x34', '\x2', '\x2', '\xBD', '#', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '\x31', '\x2', '\x2', '\xBF', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x32', '\x2', '\x2', '\xC1', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\t', '\t', '\x2', '\x2', '\xC3', 
		')', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\b', '\x2', '\x2', 
		'\xC5', '\xC6', '\x5', '\x1E', '\x10', '\x2', '\xC6', '\xCA', '\a', '-', 
		'\x2', '\x2', '\xC7', '\xC9', '\a', '\x11', '\x2', '\x2', '\xC8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x2', '\x2', '\x2', 
		'\xCE', '\xDD', '\a', '.', '\x2', '\x2', '\xCF', '\xD0', '\a', '\t', '\x2', 
		'\x2', '\xD0', '\xD1', '\x5', '\x1E', '\x10', '\x2', '\xD1', '\xD5', '\a', 
		'-', '\x2', '\x2', '\xD2', '\xD4', '\a', '\x11', '\x2', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '.', '\x2', '\x2', '\xDA', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\n', '\x2', '\x2', '\xE1', '\xE5', '\a', '-', '\x2', '\x2', 
		'\xE2', '\xE4', '\a', '\x11', '\x2', '\x2', '\xE3', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\x5', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\a', '.', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '+', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', 
		'\x33', '\x2', '\x2', '\xEE', '\xF0', '\a', '/', '\x2', '\x2', '\xEF', 
		'\xF1', '\x5', '.', '\x18', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x30', '\x2', '\x2', '\xF3', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x5', '\x1E', '\x10', 
		'\x2', '\xF5', '\xF7', '\x5', '\x1C', '\xF', '\x2', '\xF6', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x35', '\x2', 
		'\x2', '\xF9', '\xFA', '\x5', '.', '\x18', '\x2', '\xFA', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFE', '\x5', '\x1E', '\x10', '\x2', '\xFC', 
		'\xFE', '\x5', '\x1C', '\xF', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x102', '\a', '\v', '\x2', '\x2', '\x102', '\x103', '\a', 
		'\x33', '\x2', '\x2', '\x103', '\x105', '\a', '/', '\x2', '\x2', '\x104', 
		'\x106', '\x5', '\x32', '\x1A', '\x2', '\x105', '\x104', '\x3', '\x2', 
		'\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '\x30', '\x2', '\x2', 
		'\x108', '\x10C', '\a', '-', '\x2', '\x2', '\x109', '\x10B', '\a', '\x11', 
		'\x2', '\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\x5', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '.', '\x2', 
		'\x2', '\x111', '\x31', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\x33', '\x2', '\x2', '\x113', '\x114', '\a', '\x35', '\x2', '\x2', 
		'\x114', '\x117', '\x5', '\x32', '\x1A', '\x2', '\x115', '\x117', '\a', 
		'\x33', '\x2', '\x2', '\x116', '\x112', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\a', '\f', '\x2', '\x2', '\x119', '\x11A', '\a', 
		'/', '\x2', '\x2', '\x11A', '\x11B', '\x5', '\x1E', '\x10', '\x2', '\x11B', 
		'\x11C', '\a', '\x30', '\x2', '\x2', '\x11C', '\x120', '\a', '-', '\x2', 
		'\x2', '\x11D', '\x11F', '\a', '\x11', '\x2', '\x2', '\x11E', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', '\x2', '\x2', 
		'\x2', '\x124', '\x125', '\a', '.', '\x2', '\x2', '\x125', '\x35', '\x3', 
		'\x2', '\x2', '\x2', ' ', '=', '@', '\x42', 'H', 'S', '\\', 'g', 'p', 
		'x', '\x7F', '\x84', '\x89', '\x8D', '\x9B', '\xAF', '\xB1', '\xBA', '\xCA', 
		'\xD5', '\xDD', '\xE5', '\xEB', '\xF0', '\xF6', '\xFD', '\xFF', '\x105', 
		'\x10C', '\x116', '\x120',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
